{"metadata":{"kernelspec":{"name":"ir","display_name":"R","language":"R"},"language_info":{"name":"R","codemirror_mode":"r","pygments_lexer":"r","mimetype":"text/x-r-source","file_extension":".r","version":"4.0.5"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30618,"isInternetEnabled":true,"language":"r","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{"_uuid":"051d70d956493feee0c6d64651c6a088724dca2a","_execution_state":"idle"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"<hr>\n\n![](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot1.png)\n\n<h3>For Full code Without Html format press Show code <h3 /> \n<details>\n  <summary>Show Code</summary>\n  \n  ```r\n  # Data Collection OpenWeather APIs\ninstall.packages(c('RSQLite'), repos = 'http://cran.rstudio.com',dependecies=TRUE)\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\ninstall.packages(\"plotly\")\nlibrary(\"tidymodels\")\nlibrary(\"stringr\")\nlibrary(RSQLite)\nrequire(\"httr\")\nlibrary(httr)\nlibrary('glmnet')\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(dplyr)\nlibrary(DBI)\nlibrary(plotly)\nlibrary(\"RSQLite\")\n\n# URL for Current Weather API\ncurrent_weather_url <- 'https://api.openweathermap.org/data/2.5/weather'\n\n# need to be replaced by your real API key\nyour_api_key <- \"62d8a887a109f6a28e96dbe5f584e56e\"\n# Input `q` is the city name\n# Input `appid` is your API KEY, \n# Input `units` are preferred units such as Metric or Imperial\ncurrent_query <- list(q = \"Seoul\", appid = your_api_key, units=\"metric\")\n\n# Get response \nresponse <- GET(current_weather_url, query=current_query)\nhttp_type(response)\njson_result <- content(response, as=\"parsed\")\nclass(json_result)\njson_result\n\n# Create some empty vectors to hold data temporarily\nweather <- c()\nvisibility <- c()\ntemp <- c()\ntemp_min <- c()\ntemp_max <- c()\npressure <- c()\nhumidity <- c()\nwind_speed <- c()\nwind_deg <- c()\n\n# $weather is also a list with one element, its $main element indicates the weather status such as clear or rain\nweather <- c(weather, json_result$weather[[1]]$main)\n# Get Visibility\nvisibility <- c(visibility, json_result$visibility)\n# Get current temperature \ntemp <- c(temp, json_result$main$temp)\n# Get min temperature \ntemp_min <- c(temp_min, json_result$main$temp_min)\n# Get max temperature \ntemp_max <- c(temp_max, json_result$main$temp_max)\n# Get pressure\npressure <- c(pressure, json_result$main$pressure)\n# Get humidity\nhumidity <- c(humidity, json_result$main$humidity)\n# Get wind speed\nwind_speed <- c(wind_speed, json_result$wind$speed)\n# Get wind direction\nwind_deg <- c(wind_deg, json_result$wind$deg)\n\n\n# Combine all vectors\nweather_data_frame <- data.frame(weather=weather, \n                                 visibility=visibility, \n                                 temp=temp, \n                                 temp_min=temp_min, \n                                 temp_max=temp_max, \n                                 pressure=pressure, \n                                 humidity=humidity, \n                                 wind_speed=wind_speed, \n                                 wind_deg=wind_deg)\n\n\n\n# Check the generated data frame\nprint(weather_data_frame)\n\n\n\n# TASK:  Get 5-day weather forecasts for a list of cities using the OpenWeather API\n\n# Create some empty vectors to hold data temporarily\n\n# City name column\ncity <- c()\n# Weather column, rainy or cloudy, etc\nweather <- c()\n# Sky visibility column\nvisibility <- c()\n# Current temperature column\ntemp <- c()\n# Max temperature column\ntemp_min <- c()\n# Min temperature column\ntemp_max <- c()\n# Pressure column\npressure <- c()\n# Humidity column\nhumidity <- c()\n# Wind speed column\nwind_speed <- c()\n# Wind direction column\nwind_deg <- c()\n# Forecast timestamp\nforecast_datetime <- c()\n# Season column\n# Note that for season, you can hard code a season value from levels Spring, Summer, Autumn, and Winter based on your current month.\nseason <- c()\n\n\n\n# Get forecast data for a given city list\nget_weather_forecaset_by_cities <- function(city_names){\n  df <- data.frame()\n  for (city_name in city_names){\n    # Forecast API URL\n    forecast_url <- 'https://api.openweathermap.org/data/2.5/forecast'\n    # Create query parameters\n    forecast_query <- list(q = city_name, appid = \"{your_api_key}\", units=\"metric\")\n    # Make HTTP GET call for the given city\n    forecast_response <- GET(forecast_url, query = forecast_query)\n    # Note that the 5-day forecast JSON result is a list of lists. You can print the reponse to check the results\n    #results <- json_list$list\n    forecast_json_list <- content(forecast_response, as = \"parsed\")\n    results <- forecast_json_list$list\n    result <- c(1:40)\n    # Loop the json result\n    for(result in results) {\n      city <- c(city, city_name)\n      \n    }\n    \n    # Add the R Lists into a data frame\n  }\n  \n  # Return a data frame\n  return(df)\n  \n}\n\n\ncities <- c(\"Seoul\", \"Washington, D.C.\", \"Paris\", \"Suzhou\")\ncities_weather_df <- get_weather_forecaset_by_cities(cities)\n\n# Write cities_weather_df to `cities_weather_forecast.csv`\nwrite.csv(cities_weather_df, \"cities_weather_forecast.csv\", row.names=FALSE)\n\n# TASK: Download datasets as csv files from cloud storage\n# Download some general city information such as name and locations\nurl <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/raw_worldcities.csv\"\n# download the file\ndownload.file(url, destfile = \"raw_worldcities.csv\")\n\n# Download a specific hourly Seoul bike sharing demand dataset\nurl <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/raw_seoul_bike_sharing.csv\"\n# download the file\ndownload.file(url, destfile = \"raw_seoul_bike_sharing.csv\")\n\n\n\n\n\n\n\n# Data collection Web scrapping\n# Check if need to install rvest` library\nrequire(\"rvest\")\n\n\nurl <- \"https://en.wikipedia.org/wiki/List_of_bicycle-sharing_systems\"\n# Get the root HTML node by calling the `read_html()` method with URL\nroot_node <- read_html(url)\ntable_node <- html_nodes(root_node, \"table\")\ntable_content <- html_table(table_node, fill = TRUE)[[1]]\n\n\n# Convert the bike-sharing system table into a dataframe\nraw_bike_data <- as.data.frame(table_content)\n\n\n# Summarize the dataframe\nsummary(raw_bike_data)\n\n# Export the dataframe into a csv file\nwrite.csv(raw_bike_data, \"raw_bike_data\")\n\n\n\n\n##Data Wrangling with Regular Expressions</h1>\n\n# Check whether you need to install the `tidyverse` library\n\n# Download raw_bike_sharing_systems.csv\nurl <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/raw_bike_sharing_systems.csv\"\ndownload.file(url, destfile = \"raw_bike_sharing_systems.csv\")\n\n# Download raw_cities_weather_forecast.csv\nurl <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/raw_cities_weather_forecast.csv\"\ndownload.file(url, destfile = \"raw_cities_weather_forecast.csv\")\n\n# Download raw_worldcities.csv\nurl <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/raw_worldcities.csv\"\ndownload.file(url, destfile = \"raw_worldcities.csv\")\n\n# Download raw_seoul_bike_sharing.csv\nurl <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/raw_seoul_bike_sharing.csv\"\ndownload.file(url, destfile = \"raw_seoul_bike_sharing.csv\")\n\n\n\n# List dataset\ndataset_list <- c('raw_bike_sharing_systems.csv', 'raw_seoul_bike_sharing.csv', 'raw_cities_weather_forecast.csv', 'raw_worldcities.csv')\n\n\n# for loop to convert names\nfor (dataset_name in dataset_list){\n  # Read dataset\n  dataset <- read.csv(dataset_name)\n  # Standardized its columns:\n  \n  # Convert all column names to uppercase\n  colnames(dataset) <- toupper(colnames(dataset))\n  # Replace any white space separators by underscores, using the str_replace_all function\n  colnames(dataset) <- str_replace_all(colnames(dataset), \" \", \"_\")\n  # Save the dataset \n  write.csv(dataset, dataset_name, row.names=FALSE)\n}\n\n# read the result dataset \n\nfor (dataset_name in dataset_list){\n  # Print a summary for each data set to check whether the column names were correctly converted\n  dataset <- read.csv(dataset_name)\n  print(colnames(dataset))\n}\n\n#Process the web-scraped bike sharing system dataset \n# First load the dataset\nbike_sharing_df <- read.csv(\"raw_bike_sharing_systems.csv\")\n# Print its head\nhead(bike_sharing_df)\n\n#In this project, let's only focus on processing the following revelant columns (feel free to process the other columns for more practice):\n\n#COUNTRY: Country name\n#CITY: City name\n#SYSTEM: Bike-sharing system name\n#BICYCLES: Total number of bikes in the system\n# Select the four columns\nsub_bike_sharing_df <- bike_sharing_df %>% select(COUNTRY, CITY, SYSTEM, BICYCLES)\nsapply(sub_bike_sharing_df, typeof)\nsub_bike_sharing_df %>% \n  summarize_all(class) %>%\n  gather(variable, class)\n# grepl searches a string for non-digital characters, and returns TRUE or FALSE\n# if it finds any non-digital characters, then the bicyle column is not purely numeric\nfind_character <- function(strings) {\n  grepl(\"[^0-9]\", strings)\n}\n#Let's try to find any elements in the `Bicycles` column containing non-numeric characters.\nsub_bike_sharing_df %>% \n  select(BICYCLES) %>% \n  filter(find_character(BICYCLES)) %>%\n  slice(0:10)\n# Define a 'reference link' character class, \n# `[A-z0-9]` means at least one character \n# `\\\\[` and `\\\\]` means the character is wrapped by [], such as for [12] or [abc]\nref_pattern <- \"\\\\[[A-z0-9]+\\\\]\"\nfind_reference_pattern <- function(strings) grepl(ref_pattern, strings)\n# Check whether the COUNTRY column has any reference links\nsub_bike_sharing_df %>% \n  select(COUNTRY) %>% \n  filter(find_reference_pattern(COUNTRY)) %>%\n  slice(0:10)\n# Check whether the CITY column has any reference links\nsub_bike_sharing_df %>% \n  select(CITY) %>% \n  filter(find_reference_pattern(CITY)) %>%\n  slice(0:10)\n#Hmm, looks like the `CITY` column has some reference links to be removed. Next, let's check the `SYSTEM` column.\n# Check whether the System column has any reference links\nsub_bike_sharing_df %>% \n  select(SYSTEM) %>% \n  filter(find_reference_pattern(SYSTEM)) %>%\n  slice(0:10)\n# remove reference link\nremove_ref <- function(strings) {\n  ref_pattern <- \"\\\\[[A-z0-9]+\\\\]\"\n  result <- str_replace_all(strings, ref_pattern, \" \")\n  return(result)\n  # Replace all matched substrings with a white space using str_replace_all()\n  # Trim the reslt if you want\n  # return(result)\n}\n# sub_bike_sharing_df %>% mutate(column1=remove_ref(column1), ... )\nresult <- sub_bike_sharing_df %>% \n  select(CITY, SYSTEM, BICYCLES, COUNTRY) %>%\n  mutate(CITY = remove_ref(CITY)) %>%\n  mutate(SYSTEM = remove_ref(SYSTEM)) %>%\n  mutate(BICYCLES = remove_ref(BICYCLES))\nresult\nresult %>% \n  select(CITY, SYSTEM, BICYCLES) %>% \n  filter(find_reference_pattern(CITY) | find_reference_pattern(SYSTEM) | find_reference_pattern(BICYCLES))\n# TASK: Extract the numeric value using regular expressions\n\n# Extract the first number\nextract_num <- function(columns){\n  # Define a digital pattern\n  digitals_pattern <- \"Define a pattern matching a digital substring\"\n  # Find the first match using str_extract\n  # Convert the result to numeric using the as.numeric() function\n}\n# Extract the first number\nextract_num <- function(columns){\n  # Define a digital pattern\n  digitals_pattern <- \"[^0-9]\"\n  str_extract(columns, digitals_pattern)\n  columns <- as.numeric(columns)\n  # Find the first match using str_extract\n  # Convert the result to numeric using the as.numeric() function\n}\n# Use the mutate() function on the BICYCLES column\nresult <- sub_bike_sharing_df %>% \n  select(CITY, SYSTEM, BICYCLES, COUNTRY) %>%\n  mutate(CITY = remove_ref(CITY)) %>%\n  mutate(SYSTEM = remove_ref(SYSTEM)) %>%\n  mutate(BICYCLES = extract_num(BICYCLES))\nresult <- result[, -1]\nsummary(result$BICYCLES)\n# Write dataset to `bike_sharing_systems.csv`\nwrite.csv(result, \"bike_sharing_systems.csv\")\n\n\n\n\n\n# Check if you need to install the `tidyverse` library\n\nbike_sharing_df <- read_csv(\"raw_seoul_bike_sharing.csv\", col_name =TRUE, cols(\n  DATE = col_character(),\n  RENTED_BIKE_COUNT = col_double(),\n  HOUR = col_double(),\n  TEMPERATURE = col_double(),\n  HUMIDITY = col_double(),\n  WIND_SPEED = col_double(),\n  VISIBILITY = col_double(),\n  DEW_POINT_TEMPERATURE = col_double(),\n  SOLAR_RADIATION = col_double(),\n  RAINFALL = col_double(),\n  SNOWFALL = col_double(),\n  SEASONS = col_character(),\n  HOLIDAY = col_character(),\n  FUNCTIONING_DAY = col_character()\n))\n# Or you may read it from he)\n\nsummary(bike_sharing_df)\ndim(bike_sharing_df)\n# Drop rows with `RENTED_BIKE_COUNT` column == NA\nbike_sharing_df <- bike_sharing_df %>% drop_na(RENTED_BIKE_COUNT)\n# Print the dataset dimension again after those rows are dropped\nsummary(bike_sharing_df)\ndim(bike_sharing_df)\nbike_sharing_df %>% \n  filter(is.na(TEMPERATURE))\n\n# Calculate the summer average temperature\navg_temp <- bike_sharing_df %>%\n  filter(SEASONS == \"Summer\") %>%\n  summarise(avg_temp = mean(TEMPERATURE, na.rm = TRUE)) %>%\n  pull(avg_temp)  # Extract the numeric value from the avg_tem object\n\n# Impute missing values for TEMPERATURE column with summer average temperature\nbike_sharing_df <- bike_sharing_df %>% \n  mutate(TEMPERATURE = ifelse(is.na(TEMPERATURE), avg_temp, TEMPERATURE))\n\nhead(bike_sharing_df)\nhead(bike_sharing_df, 10)\n# Print the summary of the dataset again to make sure no missing values in all columns\nsummary(bike_sharing_df)\n# Save the dataset as `seoul_bike_sharing.csv`\nwrite_csv(bike_sharing_df, \"seoul_bike_sharing.csv\")\n\n\n#TASK: Create indicator (dummy) variables for categorical variables\n# Using mutate() function to convert HOUR column into character type\nbike_sharing_df %>%\n  select(HOUR) %>%\n  mutate_if(is.numeric, as.character) %>%\n  slice(1:5)\n\nbike_sharing_df <- bike_sharing_df %>%\n  mutate(quantile_rank = ntile(bike_sharing_df$HOUR, 4))\n\ncol <- c(\"SEASONS\", \"HOLIDAY\", \"quantile_rank\")\n\nfeature <- function(x) {\n  for (x in col) {\n    bike_sharing_df <<- bike_sharing_df %>%\n      mutate(dummy = 1) %>%\n      spread(key = x, value = dummy, fill = 0)\n  }\n}\nfeature()\n# Print the dataset summary again to make sure the indicator columns are created properly\nsummary(bike_sharing_df)\n# Save the dataset as `seoul_bike_sharing_converted.csv`3\n\nwrite_csv(bike_sharing_df, \"seoul_bike_sharing_converted.csv\")\n\n# write_csv(dataframe, \"seoul_bike_sharing_converted.csv\")\n\n# Normalize data\n# Use the `mutate()` function to apply min-max normalization on columns \n# `RENTED_BIKE_COUNT`, `TEMPERATURE`, `HUMIDITY`, `WIND_SPEED`, `VISIBILITY`, `DEW_POINT_TEMPERATURE`, `SOLAR_RADIATION`, `RAINFALL`, `SNOWFALL`\n\nbike_sharing_df <- bike_sharing_df %>%\n  mutate(RENTED_BIKE_COUNT = (RENTED_BIKE_COUNT- min(RENTED_BIKE_COUNT))/ (max(RENTED_BIKE_COUNT- min(RENTED_BIKE_COUNT))))\n\nhead(bike_sharing_df)\n\n# Print the summary of the dataset again to make sure the numeric columns range between 0 and 1\nsummary(bike_sharing_df)\n# Save the dataset as `seoul_bike_sharing_converted_normalized.csv`\nwrite_csv(bike_sharing_df, \"seoul_bike_sharing_converted_normalized.csv\")\n\n# write_csv(dataframe, \"seoul_bike_sharing_converted_normalized.csv\")\n\n\n\n# Standardize the column names again for the new datasetsDataset list\n#Data List\ndataset_list <- c('seoul_bike_sharing.csv', 'seoul_bike_sharing_converted.csv', 'seoul_bike_sharing_converted_normalized.csv')\n\nfor (dataset_name in dataset_list){\n  # Read dataset\n  dataset <- read_csv(dataset_name)\n  # Standardized its columns:\n  # Convert all columns names to uppercase\n  names(dataset) <- toupper(names(dataset))\n  # Replace any white space separators by underscore, using str_replace_all function\n  names(dataset) <- str_replace_all(names(dataset), \" \", \"_\")\n  # Save the dataset back\n  write.csv(dataset, dataset_name, row.names=FALSE)\n}\n\n\n# Define database connection\ncon <- dbConnect(RSQLite::SQLite(), \"RDB.sqlite\")\n\n# Create tables if they do not exist\nif (!dbExistsTable(con, \"WORLD_CITIES\")) {\n  dbExecute(con, \"\n           CREATE TABLE WORLD_CITIES (\n             CITY VARCHAR(50),\n             CITY_ASCII VARCHAR(50),\n             LAT DECIMAL(20,2),\n             LNG DECIMAL(20,2),\n             COUNTRY VARCHAR(50),\n             ISO2 VARCHAR(5),\n             ISO3 VARCHAR(5),\n             ADMIN_NAME VARCHAR(100), \n             CAPITAL VARCHAR(50),\n             POPULATION BIGINT,\n             ID BIGINT NOT NULL\n           );\n           \")\n}\n\nif (!dbExistsTable(con, \"BIKE_SHARING_SYSTEMS\")) {\n  dbExecute(con, \"\n           CREATE TABLE BIKE_SHARING_SYSTEMS (\n             COUNTRY VARCHAR(20),\n             CITY VARCHAR(87),\n             SYSTEM VARCHAR(40),\n             BICYCLES NUMERIC\n           );\n           \")\n}\n\nif (!dbExistsTable(con, \"CITIES_WEATHER_FORECAST\")) {\n  dbExecute(con, \"\n           CREATE TABLE CITIES_WEATHER_FORECAST (\n             CITY VARCHAR(16),\n             WEATHER VARCHAR(6),\n             VISIBILITY SMALLINT,\n             TEMP DECIMAL(6,2),\n             TEMP_MIN DECIMAL(6,2),\n             TEMP_MAX DECIMAL(6,2),\n             PRESSURE SMALLINT,\n             HUMIDITY SMALLINT,\n             WIND_SPEED DECIMAL(6,2),\n             WIND_DEG SMALLINT,\n             SEASON VARCHAR(6),\n             FORECAST_DATETIME TIMESTAMP\n           );\n           \")\n}\n\nif (!dbExistsTable(con, \"SEOUL_BIKE_SHARING\")) {\n  dbExecute(con, \"\n           CREATE TABLE SEOUL_BIKE_SHARING (\n             DATE VARCHAR(30),\n             RENTED_BIKE_COUNT SMALLINT,\n             HOUR SMALLINT,\n             TEMPERATURE DECIMAL(4,1),\n             HUMIDITY SMALLINT,\n             WIND_SPEED DECIMAL(3,1),\n             VISIBILITY SMALLINT,\n             DEW_POINT_TEMPERATURE DECIMAL(4,1),\n             SOLAR_RADIATION DECIMAL(5,2),\n             RAINFALL DECIMAL(3,1),\n             SNOWFALL DECIMAL(3,1),\n             SEASONS VARCHAR(10),\n             HOLIDAY VARCHAR(20),\n             FUNCTIONING_DAY VARCHAR(5)\n           );\n           \")\n}\n\n# Load data into tables\nworldcities <- read.csv(\"raw_worldcities.csv\")\nbike_sharing_systems <- read.csv(\"raw_bike_sharing_systems.csv\")\ncities_weather_forecast <- read.csv(\"raw_cities_weather_forecast.csv\")\nseoul_bike_sharing <- read.csv(\"seoul_bike_sharing.csv\")\n\ndbWriteTable(con, \"WORLD_CITIES\", worldcities, overwrite = TRUE)\ndbWriteTable(con, \"bike_sharing_systems\", bike_sharing_systems, overwrite = TRUE)\ndbWriteTable(con, \"CITIES_WEATHER_FORECAST\", cities_weather_forecast, overwrite = TRUE)\ndbWriteTable(con, \"SEOUL_BIKE_SHARING\", seoul_bike_sharing, overwrite = TRUE)\n\n\nview(bike_sharing_systems)\n\n# Close connection\ndbDisconnect(con)\n\nview(bike_sharing_systems)\n\n\n# Connect to SQLite database\ncon <- dbConnect(RSQLite::SQLite(), \"yzf09619.sqlite\")\n# Task 1 - Record Count\ndbGetQuery(con, \"SELECT count(*) as Count_of_Records FROM seoul_bike_sharing\")\n\n# Task 2 - Operational Hours\ndbGetQuery(con, \"SELECT count(HOUR) as Numer_of_hours FROM seoul_bike_sharing WHERE RENTED_BIKE_COUNT > 0\")\n\n# Task 3\ndbGetQuery(con, \"SELECT * FROM CITIES_WEATHER_FORECAST WHERE CITY = 'Seoul' LIMIT 1\")\n\n# Task 4\ndbGetQuery(con, \"SELECT DISTINCT(SEASONS) FROM seoul_bike_sharing\")\n\n# Task 5\ndbGetQuery(con, \"SELECT MIN(DATE) as Start_Date, MAX(DATE) as End_Date FROM seoul_bike_sharing\")\n\n# Task 6\ndbGetQuery(con, \"SELECT DATE, HOUR, RENTED_BIKE_COUNT as Maximum_COUNT FROM seoul_bike_sharing WHERE RENTED_BIKE_COUNT = (SELECT MAX(RENTED_BIKE_COUNT) FROM seoul_bike_sharing)\")\n\n# Task 7\ndbGetQuery(con, \"SELECT SEASONS, HOUR, AVG(RENTED_BIKE_COUNT), AVG(TEMPERATURE) FROM seoul_bike_sharing GROUP BY SEASONS, HOUR ORDER BY AVG(RENTED_BIKE_COUNT) DESC LIMIT 10\")\n\n# Task 8\ndbGetQuery(con, \"SELECT SEASONS, AVG(RENTED_BIKE_COUNT) as AVG_S_COUNT, MIN(RENTED_BIKE_COUNT) as MIN_S_COUNT, MAX(RENTED_BIKE_COUNT) as MAX_S_COUNT FROM seoul_bike_sharing GROUP BY SEASONS ORDER BY AVG_S_COUNT DESC\")\n\n# Task 9\ndbGetQuery(con, \"SELECT SEASONS, AVG(RENTED_BIKE_COUNT) as AVG_S_COUNT, AVG(TEMPERATURE) as AVG_S_TEMP, AVG(HUMIDITY) as AVG_S_HUMIDITY, AVG(WIND_SPEED) as AVG_WIND_SPEED, AVG(VISIBILITY) as AVG_VISIBILITY, AVG(DEW_POINT_TEMPERATURE) as AVG_DEW_POINT, AVG(SOLAR_RADIATION) as AVG_SOLAR_RADIATION, AVG(RAINFALL) as AVG_RAINFALL, AVG(SNOWFALL) as AVG_SNOWFALL FROM seoul_bike_sharing GROUP BY SEASONS ORDER BY AVG_S_COUNT DESC\")\n\n# Task 10\ndbGetQuery(con, \"SELECT B.BICYCLES, B.CITY, B.COUNTRY, W.LAT, W.LNG, W.POPULATION FROM bike_sharing_systems AS B LEFT JOIN WORLD_CITIES AS W ON B.CITY = W.CITY_ASCII WHERE B.CITY = 'Seoul'\")\n\n# Task 11\ndbGetQuery(con, \"SELECT B.BICYCLES, B.CITY, B.COUNTRY, W.LAT, W.LNG, W.POPULATION FROM BIKE_SHARING_SYSTEMS AS B LEFT JOIN WORLD_CITIES AS W ON B.CITY = W.CITY_ASCII WHERE B.CITY = 'Seoul' OR (B.BICYCLES BETWEEN 15000 AND 20000) ORDER BY B.BICYCLES DESC\")\n\n# Close database connection\ndbDisconnect(con)\n\n# Assignment: Exploratory Data Analysis with tidyverse and ggplot2\n# provide your solution here\nseoul_bike_sharing <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/seoul_bike_sharing.csv\"\nfile <- download.file(seoul_bike_sharing, destfile = \"seoul_bike_sharing.csv\" )\n\nseoul_bike_sharing <- read.csv(\"seoul_bike_sharing.csv\")\n\n\n\n# Assignment: Exploratory Data Analysis with tidyverse and ggplot2\n\n\n# Download the dataset and read it into R\nseoul_bike_sharing_url <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/seoul_bike_sharing.csv\"\ndownload.file(seoul_bike_sharing_url, destfile = \"seoul_bike_sharing.csv\")\nseoul_bike_sharing <- read.csv(\"seoul_bike_sharing.csv\")\n\n# Task 2: Recast DATE as a date\nseoul_bike_sharing$DATE <- as.Date(seoul_bike_sharing$DATE, format = \"%d/%m/%Y\")\n\n# Task 3: Cast HOURS as a categorical variable\nseoul_bike_sharing$HOUR <- as.factor(seoul_bike_sharing$HOUR)\n\n# Task 4: Dataset Summary\nsummary(seoul_bike_sharing)\n\n# Task 5: Calculate how many Holidays there are\nholidays_count <- seoul_bike_sharing %>%\n  filter(HOLIDAY == \"Holiday\") %>%\n  nrow()\nholidays_count\n\n# Task 6: Calculate the percentage of records that fall on a holiday\ntotal_records <- nrow(seoul_bike_sharing)\nholidays_count_percentage <- (holidays_count / total_records) * 100\nholidays_count_percentage\n\n# Task 7: Determine how many records we expect to have\ntotal_records\n\n# Task 8: Determine the number of records based on 'FUNCTIONING_DAY'\nseoul_bike_sharing %>%\n  count(FUNCTIONING_DAY)\n\n# Task 9: Calculate the seasonal total rainfall and snowfall\nseoul_bike_sharing %>%\n  group_by(SEASONS) %>%\n  summarize(total_rainfall = sum(RAINFALL, na.rm = TRUE),\n            total_snowfall = sum(SNOWFALL, na.rm = TRUE))\n\n\n\n\n\n\n#Load the ggplot2 package so we can generate some data visualizations.\n# provide your solution here\n\n#Create a scatter plot of RENTED_BIKE_COUNT vs DATE\n# provide your solution here\nggplot(seoul_bike_sharing, aes(x = DATE, y = RENTED_BIKE_COUNT, alpha=0.5, color = I(\"orange\"))) +\n  geom_point() +\n  ggtitle(\"Rented Bike Count According to Date\") +\n  theme(plot.title = element_text(face = \"bold\", color = \"green\"))\n#reate the same plot of the RENTED_BIKE_COUNT time series,\n#but now add HOURS as the colour\n# provide your solution here\nggplot(seoul_bike_sharing, aes(x = DATE, y = RENTED_BIKE_COUNT, alpha=0.5, color = HOUR)) +\n  geom_point() +\n  ggtitle(\"Rented Bike Count According to Date\") +\n  theme(plot.title = element_text(face = \"bold\", color = \"purple\"))\n#Histogram Rented bike density\n# provide your solution here\nggplot(seoul_bike_sharing, aes(x = RENTED_BIKE_COUNT, colour = I(\"green\"), fill = I(\"white\"))) +\n  geom_histogram(aes(y = ..density..)\n  ) +\n  geom_density(aes(color = I(\"pink\"), fill = I(\"Maroon\"))) +\n  ggtitle(\"Rented Bike Density\") +\n  theme(plot.title = element_text(face = \"bold\", color = \"green\"),\n        legend.position = \"none\")\n# Also we can use with alpha\n# provide your solution here\nggplot(seoul_bike_sharing, aes(x = RENTED_BIKE_COUNT), color = I(\"black\"), fill = I(\"white\")) +\n  geom_histogram(aes(y = ..density..),colour = 1, fill = \"white\", alpha = 0.5\n                 \n  ) +\n  \n  geom_density(aes(color = I(\"blue\"))) +\n  ggtitle(\"Rented Bike Density\") +\n  theme(plot.title = element_text(face = \"bold\", color = \"black\"),\n        legend.position = \"none\")\n#Correlation between two variables (scatter plot)\n# provide your solution here\nggplot(seoul_bike_sharing, aes(x = TEMPERATURE, y = RENTED_BIKE_COUNT, colour=HOUR)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"blue\") +\n  ggtitle(\"Correlation between Rented Bike count and Temp.\") +\n  theme(plot.title = element_text(face = \"bold\", color = \"black\"))\n# classify per season\nggplot(seoul_bike_sharing, aes(x = TEMPERATURE, y = RENTED_BIKE_COUNT, color = HOUR, alpha = 0.25)) +\n  geom_point() +\n  facet_wrap(~SEASONS) +\n  geom_smooth(method = \"lm\", color = \"brown\") \n#Create boxplot\n\n# provide your solution here\nggplot(seoul_bike_sharing, aes(x= HOUR, y = RENTED_BIKE_COUNT)) +\n  facet_wrap(~SEASONS) +\n  geom_boxplot(fill = \"bisque\", alpha = 0.3)+\n  theme_linedraw()+\n  ggtitle(\" Rented Bike count Per Hour Summary\") +\n  guides(color = FALSE) +\n  geom_jitter(aes(color = I('purple')), alpha=0.05) +\n  theme_linedraw()+\n  theme(plot.title = element_text(face = \"bold\", color = \"black\"),\n        plot.background = element_rect(color = \"red\"),\n        axis.line = element_line(color = \"red\")\n  )\n# Rainfall and date scatter plot\nseoul_bike_sharing %>%\n  group_by(DATE) %>%\n  summarise(daily_rainfall = sum(RAINFALL), daily_snowfall = sum(SNOWFALL)) %>%\n  ggplot(aes(x = DATE)) +\n  geom_point(aes(y = daily_rainfall, color = \"RAINFALL\")) +\n  geom_point(aes(y = daily_snowfall, color = \"SNOWFALL\")) +\n  theme_classic()+\n  labs(y = \"Daily Rainfall & snowfall\") +\n  ggtitle(\"Daily rainfall And snowfall According to Date:\") +\n  theme(plot.title = element_text(face = \"bold\", color = \"brown\"),\n        axis.line = element_line(color = \"red\"))\n\n\n\n\n\n# Uncomment to install packages if running locally\n# install.packages(\"tidyverse\")\n# install.packages(\"tidymodels\")\n\n# Dataset URL\ndataset_url <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/seoul_bike_sharing_converted_normalized.csv\"\nbike_sharing_df <- read_csv(dataset_url)\n\n# Print structure of dataframe\nstr(bike_sharing_df)\n\n# Remove DATE and FUNCTIONING_DAY columns\nbike_sharing_df <- bike_sharing_df %>% \n  select(-DATE, -FUNCTIONING_DAY)\n\n# Use the `initial_split()`, `training()`, and `testing()` functions to split the dataset\n# With seed 1234\nset.seed(1234)\n# prop = 3/4\nbike_sharing_split <- initial_split(bike_sharing_df, prop = 0.75)\n\n# train_data \nbike_sharing_training <- training(bike_sharing_split)\n\n# test_data\nbike_sharing_testing <- testing(bike_sharing_split)\n\n# Use `linear_reg()` with engine `lm` and mode `regression`\nlm_model_weather <- linear_reg(mode = \"regression\") %>%\n  set_engine(engine = \"lm\")\nsummary(lm_model_weather)\ntraining_fit <-lm_model_weather %>%\n  fit(RENTED_BIKE_COUNT ~ TEMPERATURE + HUMIDITY + WIND_SPEED + VISIBILITY + DEW_POINT_TEMPERATURE + SOLAR_RADIATION + RAINFALL + SNOWFALL, data = bike_sharing_training)\n\n# print(lm_model_weather$fit)\nprint(training_fit)\n\n# build linear regression using all model\nlm <- linear_reg(mode = \"regression\") %>%\n  set_engine(engine = \"lm\")\n\n# Fit the model called `lm_model_all`\nlm_model_all <- lm %>%\n  fit(RENTED_BIKE_COUNT ~ ., data = bike_sharing_training)\n# `RENTED_BIKE_COUNT ~ .` means use all other variables except for the response variable\n\n# summary(lm_model_all$fit)\nsummary(lm_model_all)\n\nprint(lm_model_all)\n\n\n# Evalution Rmse R-squred\ntraining_results <- \n  predict(training_fit, new_data = bike_sharing_training) %>%\n  mutate(truth = bike_sharing_training$RENTED_BIKE_COUNT)\n\nhead(training_results)\n\nall_training_results  <- predict(lm_model_all, new_data = bike_sharing_training) %>%\n  mutate(truth = bike_sharing_training$RENTED_BIKE_COUNT)\nhead(all_training_results)\n\n\n# Use predict() function to generate test results for `lm_model_weather` and `lm_model_all`\n# and generate two test results dataframe with a truth column:\n\ntest_results <- \n  predict(training_fit, new_data = bike_sharing_testing) %>%\n  mutate(truth = bike_sharing_testing$RENTED_BIKE_COUNT)\n\nhead(test_results)\n\nall_testing_results  <- predict(lm_model_all, new_data = bike_sharing_testing) %>%\n  mutate(truth = bike_sharing_testing$RENTED_BIKE_COUNT)\n\nhead(all_testing_results)\n\n# rsq_weather <- rsq(...)\n# rsq_all <- rsq(...)\nrsq_weather <- rsq(test_results,\n                   truth = truth,\n                   estimate = .pred\n)\nrsq_all <- rsq(all_testing_results,\n               truth = truth,\n               estimate = .pred\n)\n\nrmse_weather <- rmse(test_results,\n                     truth = truth,\n                     estimate = .pred\n)\nrmse_all <- rmse(all_testing_results,\n                 truth = truth,\n                 estimate = .pred\n)\n# rmse_weather <- rmse(...)\n# rmse_all <- rmse(...)\n\n\nrsq_weather\nrsq_all\nrmse_weather\nrmse_all\n\nlm_model_all$fit$coefficients\n\n# Sort coefficient list\nlm_model_all %>%\n  tidy() %>%\n  arrange(desc(abs(estimate)))\n\n# Visualize the list using ggplot and geom_bar\nlm_model_all %>%\n  tidy() %>%\n  filter(!is.na(estimate)) %>%\n  ggplot(aes(x = fct_reorder(term, abs(estimate)), y = abs(estimate))) +\n  geom_bar(stat = \"identity\", fill = \"BLUE\") +\n  coord_flip() +\n  theme(axis.text.y = element_text(angle = 10, colour = \"RED\", size = 7)) +\n  xlab(\"variable\") +\n  ggtitle(\"Ranked coefficients\")\n\n\ntest_results %>%\n  mutate(train = \"testing\") %>%\n  bind_rows(training_results %>%\n              mutate(train = \"training\")) %>%\n  ggplot(aes(truth, .pred)) +\n  geom_abline(lty = 2, color = \"orange\", size = 1.5) +\n  geom_point(color = \"#006EA1\", alpha = 0.5) +\n  facet_wrap(~train) +\n  labs(x= \"Truth\", y = \"Predict Count Of Rented Bike\") +\n  ggtitle(\"Evaluate of Model 1\") +\n  theme (plot.title = element_text(face = \"bold\", color = \"green\"))\n\nall_testing_results %>%\n  mutate(train = \"testing\") %>%\n  bind_rows(all_training_results %>%\n              mutate(train = \"training\")) %>%\n  ggplot(aes(truth, .pred)) +\n  geom_abline(lty = 2, color = \"orange\", size = 1.5) +\n  geom_point(color = \"#002ED1\", alpha = 0.2) +\n  facet_wrap(~train) +\n  labs(x= \"Truth\", y = \"Predict Count Of Rented Bike\") +\n  ggtitle(\"Evaluate of Model 2\") +\n  theme (plot.title = element_text(face = \"bold\", color = \"orange\"))\n\n\n\n# Uncomment to install packages if running locally\n# install.packages(\"tidyverse\")\n# install.packages(\"tidymodels\")\n#install.packages(\"plotly\")\n\n# Uncomment to install packages if running locally\n\n\n# Load the dataset\ndataset_url <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/seoul_bike_sharing_converted_normalized.csv\"\nbike_sharing_df <- read_csv(dataset_url)\n\n# Remove unnecessary columns\nbike_sharing_df <- bike_sharing_df %>%\n  select(-DATE, -FUNCTIONING_DAY)\n\n# Define a linear regression model specification\nlm_spec <- linear_reg() %>%\n  set_engine(\"lm\") %>% \n  set_mode(\"regression\")\n\n# Split the data into training and testing datasets\nset.seed(1234)\nbike_sharing_split <- initial_split(bike_sharing_df, prop = 4/5)\nbike_sharing_training <- training(bike_sharing_split)\nbike_sharing_testing <- testing(bike_sharing_split)\n\n# Add polynomial terms\n# Plot the higher order polynomial fits\nggplot(data = bike_sharing_training, aes(RENTED_BIKE_COUNT, TEMPERATURE)) + \n  geom_point() + \n  geom_smooth(method = \"lm\", formula = y ~ x, color = \"red\") + \n  geom_smooth(method = \"lm\", formula = y ~ poly(x, 2), color = \"yellow\") + \n  geom_smooth(method = \"lm\", formula = y ~ poly(x, 4), color = \"green\") + \n  geom_smooth(method = \"lm\", formula = y ~ poly(x, 6), color = \"blue\")\n\n# Fit a linear model with higher order polynomial on some important variables \nlmp <- linear_reg(mode = \"regression\") %>%\n  set_engine(engine = \"lm\")\n\n# Use poly function to build polynomial terms\nlm_poly <- lmp %>%\n  fit(RENTED_BIKE_COUNT ~ . + poly(TEMPERATURE, 6) + poly(HUMIDITY, 4) + poly(RAINFALL, 2), data = bike_sharing_training)\n\n\n\n\n\n\n# Make predictions on test dataset using the lm_poly models\ntest_result_poly <- predict(lm_poly, new_data = bike_sharing_testing) %>%\n  mutate(truth = bike_sharing_testing$RENTED_BIKE_COUNT)\n\n# Replace negative prediction results with zero\ntest_result_poly[test_result_poly < 0] <- 0\n\n# Calculate R-squared and RMSE for the test results generated by lm_poly model\nrsq_lm_poly <- rsq(test_result_poly, truth = truth, estimate = .pred)\nrmse_lm_poly <- rmse(test_result_poly, truth = truth, estimate = .pred)\n\n# Add interaction terms\n# Add interaction terms to the poly regression built in previous step\nlm_poly_interact <- lmp %>%\n  fit(RENTED_BIKE_COUNT ~ . + poly(TEMPERATURE, 6) + poly(HUMIDITY, 4) + poly(RAINFALL, 2) + HUMIDITY * TEMPERATURE, data = bike_sharing_training)\n\ntest_result_poly_interact <- predict(lm_poly_interact, new_data = bike_sharing_testing) %>%\n  mutate(truth = bike_sharing_testing$RENTED_BIKE_COUNT)\ntest_result_poly_interact[test_result_poly < 0] <- 0\n\n# Calculate R-squared and RMSE for the new model to see if performance has improved\nrsq_lm_poly_interact <- rsq(test_result_poly_interact, truth = truth, estimate = .pred)\nrmse_lm_poly_interact <- rmse(test_result_poly_interact, truth = truth, estimate = .pred)\n\n# Add regularization\n# Define a linear regression model specification glmnet_spec using glmnet engine\n\nglmnet_spec <- linear_reg(penalty = 0.1, mixture = 1) %>%\n  set_engine(\"glmnet\")\n\n# Fit a glmnet model called lm_glmnet using the fit() function\nglmnet_recipe <- recipe(RENTED_BIKE_COUNT ~ . , data = bike_sharing_training)\nlasso_wf <- workflow() %>%\n  add_recipe(glmnet_recipe)\n\nlm_glmnet <- lasso_wf %>%\n  add_model(glmnet_spec) %>%\n  fit(data = bike_sharing_training)\n\n# Report rsq and rmse of the lm_glmnet model\nlm_glmnet_train_results <- lm_glmnet %>%\n  predict(new_data = bike_sharing_training) %>%\n  mutate(truth = bike_sharing_training$RENTED_BIKE_COUNT)\n\nlm_glmnet_train_results$.pred <- replace(lm_glmnet_train_results$.pred, lm_glmnet_train_results$.pred < 0, 0)\n\nrsq_lm_glmnet <- rsq(lm_glmnet_train_results, truth = truth, estimate = .pred)\nrmse_lm_glmnet <- rmse(lm_glmnet_train_results, truth = truth, estimate = .pred)\n\n# Experiment to search for improved models\n# Build at least five different models using polynomial terms, interaction terms, and regularizations.\nmodel2 <- linear_reg(penalty = 0.02, mixture = 1) %>%\n  set_engine(\"glmnet\")\nmodel2_fit <- model2 %>%\n  fit(RENTED_BIKE_COUNT ~ . + poly(TEMPERATURE, 6) + WINTER * `18` + DEW_POINT_TEMPERATURE + SOLAR_RADIATION + SUMMER * `18` + HUMIDITY, data = bike_sharing_training)\n\nmodel2_train_results <- model2_fit %>%\n  predict(new_data = bike_sharing_training) %>%\n  mutate(truth = bike_sharing_training$RENTED_BIKE_COUNT)\n\nmodel2$.pred <- replace(model2_train_results$.pred, model2_train_results$.pred < 0, 0)\n\nrsq_model2 <- rsq(model2_train_results, truth = truth, estimate = .pred)\nrmse_model2 <- rmse(model2_train_results, truth = truth, estimate = .pred)\n\nmodel3 <- linear_reg(penalty = 0.02, mixture = 0.2) %>%\n  set_engine(\"glmnet\")\nmodel3_fit <- model3 %>%\n  fit(RENTED_BIKE_COUNT ~ . + poly(TEMPERATURE, 6) + WINTER * `18` + poly(DEW_POINT_TEMPERATURE, 6) + SOLAR_RADIATION + SUMMER * `18` + TEMPERATURE * HUMIDITY, data = bike_sharing_training)\n\nmodel3_train_results <- model3_fit %>%\n  predict(new_data = bike_sharing_training) %>%\n  mutate(truth = bike_sharing_training$RENTED_BIKE_COUNT)\n\nmodel3$.pred <- replace(model3_train_results$.pred, model3_train_results$.pred < 0, 0)\n\nrsq_model3 <- rsq(model3_train_results, truth = truth, estimate = .pred)\nrmse_model3 <- rmse(model3_train_results, truth = truth, estimate = .pred)\n\nmodel4 <- linear_reg(penalty = 0.0015, mixture = 0.2) %>%\n  set_engine(\"glmnet\")\nmodel4_fit <- model4 %>%\n  fit(RENTED_BIKE_COUNT ~ . + poly(TEMPERATURE, 6) + WINTER * `18` + poly(DEW_POINT_TEMPERATURE, 6) + poly(SOLAR_RADIATION, 6) + SUMMER * `18` + TEMPERATURE * HUMIDITY + poly(HUMIDITY, 6), data = bike_sharing_training)\n\nmodel4_train_results <- model4_fit %>%\n  predict(new_data = bike_sharing_training) %>%\n  mutate(truth = bike_sharing_training$RENTED_BIKE_COUNT)\n\nmodel4$.pred <- replace(model4_train_results$.pred, model4_train_results$.pred < 0, 0)\n\nrsq_model4 <- rsq(model4_train_results, truth = truth, estimate = .pred)\nrmse_model4 <- rmse(model4_train_results, truth = truth, estimate = .pred)\n\nmodel5 <- linear_reg(penalty = 0.0015, mixture = 0.2) %>%\n  set_engine(\"glmnet\")\nmodel5_fit <- model5 %>%\n  fit(RENTED_BIKE_COUNT ~ . + poly(TEMPERATURE, 6) + WINTER * `18` + poly(DEW_POINT_TEMPERATURE, 6) + poly(SOLAR_RADIATION, 6) + poly(VISIBILITY, 6) + SUMMER * `18` + TEMPERATURE * HUMIDITY + poly(HUMIDITY, 6) + RAINFALL * TEMPERATURE + SNOWFALL * TEMPERATURE + RAINFALL * HUMIDITY + SNOWFALL * HUMIDITY, data = bike_sharing_training)\n\nmodel5_train_results <- model5_fit %>%\n  predict(new_data = bike_sharing_training) %>%\n  mutate(truth = bike_sharing_training$RENTED_BIKE_COUNT)\n\nmodel5_train_results$.pred <- replace(model5_train_results$.pred, model5_train_results$.pred < 0, 0)\n\nrsq_model5 <- rsq(model5_train_results, truth = truth, estimate = .pred)\nrmse_model5 <- rmse(model5_train_results, truth = truth, estimate = .pred)\n\n# Save their rmse and rsq values\nmodel_names <- c(\"lm_ploy\", \"model2\", \"model3\", \"model4\", \"model5\")\nrsq <- c(\"0.7295964\", \"0.7137937\", \"0.7392157\", \"0.7674439\", \"0.7817489\")\nrsme <- c(\"330.1608\", \"344.91\", \"329.24\", \"310.9102\", \"302.1648\")\ncomparison_df <- data.frame(model_names, rsq, rsme)\n\n# Report the best performed model in terms of rmse and rsq\nrsq_lm_ploy <- 0.7295964\nrmse_lm_ploy <- 330.1608\n\nrsq_model2 <- 0.7137937\nrmse_model2 <- 344.91\n\nrsq_model3 <- 0.7392157\nrmse_model3 <- 329.24\n\nrsq_model4 <- 0.7674439\nrmse_model4 <- 310.9102\n\nrsq_model5 <- 0.7817489\nrmse_model5 <- 302.1648\n\n# Visualize the saved RMSE and R-squared values using a grouped barchart\ncomparison_df %>%\n  pivot_longer(!model_names) %>%\n  ggplot(aes(x = model_names, y = value, fill = name)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Comparing RSME AND RSQ Across Models\", fill = \"Metric\") +\n  theme(plot.title = element_text(face = \"bold\", color = \"blue\"))\n\n# Create a Q-Q plot by plotting the distribution difference between the predictions generated by your best model and the true values on the test dataset\nggplot(model5_train_results) +\n  stat_qq(aes(sample = truth), color = \"green\") +\n  stat_qq(aes(sample = .pred), color = \"red\")\n\n```\n</details>\n<hr>\n<!-- Reference to the external CSS file -->\n<link rel=\"stylesheet\" href=\"styles.css\">\n\n<!-- Content of the markdown -->\n<h2 style=\"text-decoration: underline;\">Outline</h2>\n<ul>\n  <li><a href=\"#executive-summary\">Executive Summary</a></li>\n  <li><a href=\"#introduction\">Introduction</a></li>\n  <li><a href=\"#methodology\">Methodology</a>\n    <ul>\n      <li><a href=\"#perform-data-collection\">Perform Data Collection</a></li>\n      <li><a href=\"#perform-data-wrangling\">Perform Data Wrangling</a></li>\n      <li><a href=\"#perform-exploratory-data-analysis\">Perform Exploratory Data Analysis with SQL</a></li>\n      <li><a href=\"#perform-exploratory-data-analysis2\">Perform Exploratory Data Analysis with Visualization</a></li>\n      <li><a href=\"#perform-predictive-analysis-using-regression-models\">Perform Predictive Analysis Using Regression Models</a></li>\n      <li><a href=\"#build-an-r-shiny-dashboard-app\">Build an R Shiny Dashboard App</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>\n<hr>\n\n<h2 id=\"executive-summary\" style=\"text-decoration: underline;\">1-Executive summary:</h2>\n<ul>\n  <li><strong>Objective:</strong> The presentation focuses on analysis and predicting demand for bike-sharing services in different cities.</li>\n  <li><strong>Goal:</strong> Provide precise insights and analysis on bike sharing demand for operators and investors to enhance user experiences.</li>\n  <li><strong>Through:</strong> Apply advanced forecasting techniques based on real data.</li>\n  <li><strong>Influencing Factors Like:</strong></li>\n  <ul>\n    <li>Temperature</li>\n    <li>Date and time</li>\n    <li>Humidity</li>\n  </ul>\n</ul>\n<hr>\n\n<h2 id=\"introduction\" style=\"text-decoration: underline;\">2-Introduction:</h2>\n\n<ul>\n  <li>\n    <h3>Context:</h3>\n    <p>In this program, we focus on bike sharing demand in various cities and aim to predict this demand using analytical techniques.</p>\n  </li>\n  <li>\n    <h3>How to Predict Bike Sharing Demand?</h3>\n    <p>We utilize different types of analysis on real datasets to prepare for predictions:</p>\n    <ol>\n      <li><strong>Descriptive Analysis:</strong> Examining historical data to understand patterns and characteristics of bike sharing demand.</li>\n      <li><strong>Time Series Analysis:</strong> Analyzing demand trends over time to identify patterns and seasonality.</li>\n      <li><strong>Correlation Analysis:</strong> Identifying relationships between bike-sharing demand and other factors such as weather, day of the week, or special events.</li>\n      <li><strong>Predictive Analysis:</strong> Using statistical techniques to build predictive models and forecast future bike sharing demand.</li>\n    </ol>\n    <p>We will compare different models and select the most suitable one based on performance.</p>\n  </li>\n</ul>\n<hr>\n\n<h2 id=\"methodology\" style=\"text-decoration: underline;\">3-Methodology:</h2>\n<p>Utilizes advanced forecasting \ntechniques based on historical \ndata.<p/>\n\n![](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot2.png)\n<hr>\n<h3 id=\"perform-data-collection\">   A-Perform Data Collection</h3>\n\n![](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot3.png)\n\n<details>\n  <summary style=\"font-size: 25px;\">Show Code</summary>\n  \n  ```r\n# Data Collection OpenWeather APIs\ninstall.packages(c('RSQLite'), repos = 'http://cran.rstudio.com',dependecies=TRUE)\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"plotly\")\nlibrary(\"tidymodels\")\nlibrary(\"stringr\")\nlibrary(RSQLite)\nrequire(\"httr\")\nlibrary(httr)\nlibrary('glmnet')\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(dplyr)\nlibrary(DBI)\nlibrary(plotly)\nlibrary(\"RSQLite\")\nlibrary(ggplot2)\n# URL for Current Weather API\ncurrent_weather_url <- 'https://api.openweathermap.org/data/2.5/weather'\n\n# need to be replaced by your real API key\nyour_api_key <- \"62d8a887a109f6a28e96dbe5f584e56e\"\n# Input `q` is the city name\n# Input `appid` is your API KEY, \n# Input `units` are preferred units such as Metric or Imperial\ncurrent_query <- list(q = \"Seoul\", appid = your_api_key, units=\"metric\")\n\n# Get response \nresponse <- GET(current_weather_url, query=current_query)\nhttp_type(response)\njson_result <- content(response, as=\"parsed\")\nclass(json_result)\njson_result\n\n# Create some empty vectors to hold data temporarily\nweather <- c()\nvisibility <- c()\ntemp <- c()\ntemp_min <- c()\ntemp_max <- c()\npressure <- c()\nhumidity <- c()\nwind_speed <- c()\nwind_deg <- c()\n\n# $weather is also a list with one element, its $main element indicates the weather status such as clear or rain\nweather <- c(weather, json_result$weather[[1]]$main)\n# Get Visibility\nvisibility <- c(visibility, json_result$visibility)\n# Get current temperature \ntemp <- c(temp, json_result$main$temp)\n# Get min temperature \ntemp_min <- c(temp_min, json_result$main$temp_min)\n# Get max temperature \ntemp_max <- c(temp_max, json_result$main$temp_max)\n# Get pressure\npressure <- c(pressure, json_result$main$pressure)\n# Get humidity\nhumidity <- c(humidity, json_result$main$humidity)\n# Get wind speed\nwind_speed <- c(wind_speed, json_result$wind$speed)\n# Get wind direction\nwind_deg <- c(wind_deg, json_result$wind$deg)\n\n\n# Combine all vectors\nweather_data_frame <- data.frame(weather=weather, \n                                 visibility=visibility, \n                                 temp=temp, \n                                 temp_min=temp_min, \n                                 temp_max=temp_max, \n                                 pressure=pressure, \n                                 humidity=humidity, \n                                 wind_speed=wind_speed, \n                                 wind_deg=wind_deg)\n\n\n\n# Check the generated data frame\nprint(weather_data_frame)\n\n\n\n# TASK:  Get 5-day weather forecasts for a list of cities using the OpenWeather API\n\n# Create some empty vectors to hold data temporarily\n\n# City name column\ncity <- c()\n# Weather column, rainy or cloudy, etc\nweather <- c()\n# Sky visibility column\nvisibility <- c()\n# Current temperature column\ntemp <- c()\n# Max temperature column\ntemp_min <- c()\n# Min temperature column\ntemp_max <- c()\n# Pressure column\npressure <- c()\n# Humidity column\nhumidity <- c()\n# Wind speed column\nwind_speed <- c()\n# Wind direction column\nwind_deg <- c()\n# Forecast timestamp\nforecast_datetime <- c()\n# Season column\n# Note that for season, you can hard code a season value from levels Spring, Summer, Autumn, and Winter based on your current month.\nseason <- c()\n\n\n\n# Get forecast data for a given city list\nget_weather_forecaset_by_cities <- function(city_names){\n  df <- data.frame()\n  for (city_name in city_names){\n    # Forecast API URL\n    forecast_url <- 'https://api.openweathermap.org/data/2.5/forecast'\n    # Create query parameters\n    forecast_query <- list(q = city_name, appid = \"{your_api_key}\", units=\"metric\")\n    # Make HTTP GET call for the given city\n    forecast_response <- GET(forecast_url, query = forecast_query)\n    # Note that the 5-day forecast JSON result is a list of lists. You can print the reponse to check the results\n    #results <- json_list$list\n    forecast_json_list <- content(forecast_response, as = \"parsed\")\n    results <- forecast_json_list$list\n    result <- c(1:40)\n    # Loop the json result\n    for(result in results) {\n      city <- c(city, city_name)\n      \n    }\n    \n    # Add the R Lists into a data frame\n  }\n  \n  # Return a data frame\n  return(df)\n  \n}\n\n\ncities <- c(\"Seoul\", \"Washington, D.C.\", \"Paris\", \"Suzhou\")\ncities_weather_df <- get_weather_forecaset_by_cities(cities)\n\n# Write cities_weather_df to `cities_weather_forecast.csv`\nwrite.csv(cities_weather_df, \"cities_weather_forecast.csv\", row.names=FALSE)\n\n# TASK: Download datasets as csv files from cloud storage\n# Download some general city information such as name and locations\nurl <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/raw_worldcities.csv\"\n# download the file\ndownload.file(url, destfile = \"raw_worldcities.csv\")\n\n# Download a specific hourly Seoul bike sharing demand dataset\nurl <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/raw_seoul_bike_sharing.csv\"\n# download the file\ndownload.file(url, destfile = \"raw_seoul_bike_sharing.csv\")\n\n\n\n\n\n\n\n# Data collection Web scrapping\n# Check if need to install rvest` library\nrequire(\"rvest\")\n\n\nurl <- \"https://en.wikipedia.org/wiki/List_of_bicycle-sharing_systems\"\n# Get the root HTML node by calling the `read_html()` method with URL\nroot_node <- read_html(url)\ntable_node <- html_nodes(root_node, \"table\")\ntable_content <- html_table(table_node, fill = TRUE)[[1]]\n\n\n# Convert the bike-sharing system table into a dataframe\nraw_bike_data <- as.data.frame(table_content)\n\n\n# Summarize the dataframe\nsummary(raw_bike_data)\n\n# Export the dataframe into a csv file\nwrite.csv(raw_bike_data, \"raw_bike_data\")\n\n```\n</details>\n\n<hr>\n<hr>\n<h3 id=\"perform-data-wrangling\">B-Perform-data-wrangling</h3>\n\n![](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot4.png)\n\n<details>\n  <summary style=\"font-size: 25px;\">Show Code</summary>\n  \n  ```r\n  ##Data Wrangling with Regular Expressions</h1>\n\n# Check whether you need to install the `tidyverse` library\n\n# Download raw_bike_sharing_systems.csv\nurl <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/raw_bike_sharing_systems.csv\"\ndownload.file(url, destfile = \"raw_bike_sharing_systems.csv\")\n\n# Download raw_cities_weather_forecast.csv\nurl <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/raw_cities_weather_forecast.csv\"\ndownload.file(url, destfile = \"raw_cities_weather_forecast.csv\")\n\n# Download raw_worldcities.csv\nurl <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/raw_worldcities.csv\"\ndownload.file(url, destfile = \"raw_worldcities.csv\")\n\n# Download raw_seoul_bike_sharing.csv\nurl <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/raw_seoul_bike_sharing.csv\"\ndownload.file(url, destfile = \"raw_seoul_bike_sharing.csv\")\n\n\n\n# List dataset\ndataset_list <- c('raw_bike_sharing_systems.csv', 'raw_seoul_bike_sharing.csv', 'raw_cities_weather_forecast.csv', 'raw_worldcities.csv')\n\n\n# for loop to convert names\nfor (dataset_name in dataset_list){\n  # Read dataset\n  dataset <- read.csv(dataset_name)\n  # Standardized its columns:\n  \n  # Convert all column names to uppercase\n  colnames(dataset) <- toupper(colnames(dataset))\n  # Replace any white space separators by underscores, using the str_replace_all function\n  colnames(dataset) <- str_replace_all(colnames(dataset), \" \", \"_\")\n  # Save the dataset \n  write.csv(dataset, dataset_name, row.names=FALSE)\n}\n\n# read the result dataset \n\nfor (dataset_name in dataset_list){\n  # Print a summary for each data set to check whether the column names were correctly converted\n  dataset <- read.csv(dataset_name)\n  print(colnames(dataset))\n}\n\n#Process the web-scraped bike sharing system dataset \n# First load the dataset\nbike_sharing_df <- read.csv(\"raw_bike_sharing_systems.csv\")\n# Print its head\nhead(bike_sharing_df)\n\n#In this project, let's only focus on processing the following revelant columns (feel free to process the other columns for more practice):\n\n#COUNTRY: Country name\n#CITY: City name\n#SYSTEM: Bike-sharing system name\n#BICYCLES: Total number of bikes in the system\n# Select the four columns\nsub_bike_sharing_df <- bike_sharing_df %>% select(COUNTRY, CITY, SYSTEM, BICYCLES)\nsapply(sub_bike_sharing_df, typeof)\nsub_bike_sharing_df %>% \n  summarize_all(class) %>%\n  gather(variable, class)\n# grepl searches a string for non-digital characters, and returns TRUE or FALSE\n# if it finds any non-digital characters, then the bicyle column is not purely numeric\nfind_character <- function(strings) {\n  grepl(\"[^0-9]\", strings)\n}\n#Let's try to find any elements in the `Bicycles` column containing non-numeric characters.\nsub_bike_sharing_df %>% \n  select(BICYCLES) %>% \n  filter(find_character(BICYCLES)) %>%\n  slice(0:10)\n# Define a 'reference link' character class, \n# `[A-z0-9]` means at least one character \n# `\\\\[` and `\\\\]` means the character is wrapped by [], such as for [12] or [abc]\nref_pattern <- \"\\\\[[A-z0-9]+\\\\]\"\nfind_reference_pattern <- function(strings) grepl(ref_pattern, strings)\n# Check whether the COUNTRY column has any reference links\nsub_bike_sharing_df %>% \n  select(COUNTRY) %>% \n  filter(find_reference_pattern(COUNTRY)) %>%\n  slice(0:10)\n# Check whether the CITY column has any reference links\nsub_bike_sharing_df %>% \n  select(CITY) %>% \n  filter(find_reference_pattern(CITY)) %>%\n  slice(0:10)\n#Hmm, looks like the `CITY` column has some reference links to be removed. Next, let's check the `SYSTEM` column.\n# Check whether the System column has any reference links\nsub_bike_sharing_df %>% \n  select(SYSTEM) %>% \n  filter(find_reference_pattern(SYSTEM)) %>%\n  slice(0:10)\n# remove reference link\nremove_ref <- function(strings) {\n  ref_pattern <- \"\\\\[[A-z0-9]+\\\\]\"\n  result <- str_replace_all(strings, ref_pattern, \" \")\n  return(result)\n  # Replace all matched substrings with a white space using str_replace_all()\n  # Trim the reslt if you want\n  # return(result)\n}\n# sub_bike_sharing_df %>% mutate(column1=remove_ref(column1), ... )\nresult <- sub_bike_sharing_df %>% \n  select(CITY, SYSTEM, BICYCLES, COUNTRY) %>%\n  mutate(CITY = remove_ref(CITY)) %>%\n  mutate(SYSTEM = remove_ref(SYSTEM)) %>%\n  mutate(BICYCLES = remove_ref(BICYCLES))\nresult\nresult %>% \n  select(CITY, SYSTEM, BICYCLES) %>% \n  filter(find_reference_pattern(CITY) | find_reference_pattern(SYSTEM) | find_reference_pattern(BICYCLES))\n# TASK: Extract the numeric value using regular expressions\n\n# Extract the first number\nextract_num <- function(columns){\n  # Define a digital pattern\n  digitals_pattern <- \"Define a pattern matching a digital substring\"\n  # Find the first match using str_extract\n  # Convert the result to numeric using the as.numeric() function\n}\n# Extract the first number\nextract_num <- function(columns){\n  # Define a digital pattern\n  digitals_pattern <- \"[^0-9]\"\n  str_extract(columns, digitals_pattern)\n  columns <- as.numeric(columns)\n  # Find the first match using str_extract\n  # Convert the result to numeric using the as.numeric() function\n}\n# Use the mutate() function on the BICYCLES column\nresult <- sub_bike_sharing_df %>% \n  select(CITY, SYSTEM, BICYCLES, COUNTRY) %>%\n  mutate(CITY = remove_ref(CITY)) %>%\n  mutate(SYSTEM = remove_ref(SYSTEM)) %>%\n  mutate(BICYCLES = extract_num(BICYCLES))\nresult <- result[, -1]\nsummary(result$BICYCLES)\n# Write dataset to `bike_sharing_systems.csv`\nwrite.csv(result, \"bike_sharing_systems.csv\")\n\n\n\n\n\n# Check if you need to install the `tidyverse` library\n\nbike_sharing_df <- read_csv(\"raw_seoul_bike_sharing.csv\", col_name =TRUE, cols(\n  DATE = col_character(),\n  RENTED_BIKE_COUNT = col_double(),\n  HOUR = col_double(),\n  TEMPERATURE = col_double(),\n  HUMIDITY = col_double(),\n  WIND_SPEED = col_double(),\n  VISIBILITY = col_double(),\n  DEW_POINT_TEMPERATURE = col_double(),\n  SOLAR_RADIATION = col_double(),\n  RAINFALL = col_double(),\n  SNOWFALL = col_double(),\n  SEASONS = col_character(),\n  HOLIDAY = col_character(),\n  FUNCTIONING_DAY = col_character()\n))\n# Or you may read it from he)\n\nsummary(bike_sharing_df)\ndim(bike_sharing_df)\n# Drop rows with `RENTED_BIKE_COUNT` column == NA\nbike_sharing_df <- bike_sharing_df %>% drop_na(RENTED_BIKE_COUNT)\n# Print the dataset dimension again after those rows are dropped\nsummary(bike_sharing_df)\ndim(bike_sharing_df)\nbike_sharing_df %>% \n  filter(is.na(TEMPERATURE))\n\n# Calculate the summer average temperature\navg_temp <- bike_sharing_df %>%\n  filter(SEASONS == \"Summer\") %>%\n  summarise(avg_temp = mean(TEMPERATURE, na.rm = TRUE)) %>%\n  pull(avg_temp)  # Extract the numeric value from the avg_tem object\n\n# Impute missing values for TEMPERATURE column with summer average temperature\nbike_sharing_df <- bike_sharing_df %>% \n  mutate(TEMPERATURE = ifelse(is.na(TEMPERATURE), avg_temp, TEMPERATURE))\n\nhead(bike_sharing_df)\nhead(bike_sharing_df, 10)\n# Print the summary of the dataset again to make sure no missing values in all columns\nsummary(bike_sharing_df)\n# Save the dataset as `seoul_bike_sharing.csv`\nwrite_csv(bike_sharing_df, \"seoul_bike_sharing.csv\")\n\n\n#TASK: Create indicator (dummy) variables for categorical variables\n# Using mutate() function to convert HOUR column into character type\nbike_sharing_df %>%\n  select(HOUR) %>%\n  mutate_if(is.numeric, as.character) %>%\n  slice(1:5)\n\nbike_sharing_df <- bike_sharing_df %>%\n  mutate(quantile_rank = ntile(bike_sharing_df$HOUR, 4))\n\ncol <- c(\"SEASONS\", \"HOLIDAY\", \"quantile_rank\")\n\nfeature <- function(x) {\n  for (x in col) {\n    bike_sharing_df <<- bike_sharing_df %>%\n      mutate(dummy = 1) %>%\n      spread(key = x, value = dummy, fill = 0)\n  }\n}\nfeature()\n# Print the dataset summary again to make sure the indicator columns are created properly\nsummary(bike_sharing_df)\n# Save the dataset as `seoul_bike_sharing_converted.csv`3\n\nwrite_csv(bike_sharing_df, \"seoul_bike_sharing_converted.csv\")\n\n# write_csv(dataframe, \"seoul_bike_sharing_converted.csv\")\n\n# Normalize data\n# Use the `mutate()` function to apply min-max normalization on columns \n# `RENTED_BIKE_COUNT`, `TEMPERATURE`, `HUMIDITY`, `WIND_SPEED`, `VISIBILITY`, `DEW_POINT_TEMPERATURE`, `SOLAR_RADIATION`, `RAINFALL`, `SNOWFALL`\n\nbike_sharing_df <- bike_sharing_df %>%\n  mutate(RENTED_BIKE_COUNT = (RENTED_BIKE_COUNT- min(RENTED_BIKE_COUNT))/ (max(RENTED_BIKE_COUNT- min(RENTED_BIKE_COUNT))))\n\nhead(bike_sharing_df)\n\n# Print the summary of the dataset again to make sure the numeric columns range between 0 and 1\nsummary(bike_sharing_df)\n# Save the dataset as `seoul_bike_sharing_converted_normalized.csv`\nwrite_csv(bike_sharing_df, \"seoul_bike_sharing_converted_normalized.csv\")\n\n# write_csv(dataframe, \"seoul_bike_sharing_converted_normalized.csv\")\n\n\n\n# Standardize the column names again for the new datasetsDataset list\n#Data List\ndataset_list <- c('seoul_bike_sharing.csv', 'seoul_bike_sharing_converted.csv', 'seoul_bike_sharing_converted_normalized.csv')\n\nfor (dataset_name in dataset_list){\n  # Read dataset\n  dataset <- read_csv(dataset_name)\n  # Standardized its columns:\n  # Convert all columns names to uppercase\n  names(dataset) <- toupper(names(dataset))\n  # Replace any white space separators by underscore, using str_replace_all function\n  names(dataset) <- str_replace_all(names(dataset), \" \", \"_\")\n  # Save the dataset back\n  write.csv(dataset, dataset_name, row.names=FALSE)\n}\n```\n</details>\n\n<hr>\n<hr>\n<h3 id=\"perform-exploratory-data-analysis\">C-Perform-exploratory-data-analysis with SQL</h3>\n<p>Exploratory Data Analysis (EDA) using SQL involves leveraging SQL queries to explore and understand the underlying patterns and characteristics of a dataset with example beolow.\n<p />\n\n![](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot5.png)\n<details>\n  <summary style=\"font-size: 25px;\">Show Code</summary>\n  \n  ```r\n  # Define database connection\ncon <- dbConnect(RSQLite::SQLite(), \"RDB.sqlite\")\n\n# Create tables if they do not exist\nif (!dbExistsTable(con, \"WORLD_CITIES\")) {\n  dbExecute(con, \"\n           CREATE TABLE WORLD_CITIES (\n             CITY VARCHAR(50),\n             CITY_ASCII VARCHAR(50),\n             LAT DECIMAL(20,2),\n             LNG DECIMAL(20,2),\n             COUNTRY VARCHAR(50),\n             ISO2 VARCHAR(5),\n             ISO3 VARCHAR(5),\n             ADMIN_NAME VARCHAR(100), \n             CAPITAL VARCHAR(50),\n             POPULATION BIGINT,\n             ID BIGINT NOT NULL\n           );\n           \")\n}\n\nif (!dbExistsTable(con, \"BIKE_SHARING_SYSTEMS\")) {\n  dbExecute(con, \"\n           CREATE TABLE BIKE_SHARING_SYSTEMS (\n             COUNTRY VARCHAR(20),\n             CITY VARCHAR(87),\n             SYSTEM VARCHAR(40),\n             BICYCLES NUMERIC\n           );\n           \")\n}\n\nif (!dbExistsTable(con, \"CITIES_WEATHER_FORECAST\")) {\n  dbExecute(con, \"\n           CREATE TABLE CITIES_WEATHER_FORECAST (\n             CITY VARCHAR(16),\n             WEATHER VARCHAR(6),\n             VISIBILITY SMALLINT,\n             TEMP DECIMAL(6,2),\n             TEMP_MIN DECIMAL(6,2),\n             TEMP_MAX DECIMAL(6,2),\n             PRESSURE SMALLINT,\n             HUMIDITY SMALLINT,\n             WIND_SPEED DECIMAL(6,2),\n             WIND_DEG SMALLINT,\n             SEASON VARCHAR(6),\n             FORECAST_DATETIME TIMESTAMP\n           );\n           \")\n}\n\nif (!dbExistsTable(con, \"SEOUL_BIKE_SHARING\")) {\n  dbExecute(con, \"\n           CREATE TABLE SEOUL_BIKE_SHARING (\n             DATE VARCHAR(30),\n             RENTED_BIKE_COUNT SMALLINT,\n             HOUR SMALLINT,\n             TEMPERATURE DECIMAL(4,1),\n             HUMIDITY SMALLINT,\n             WIND_SPEED DECIMAL(3,1),\n             VISIBILITY SMALLINT,\n             DEW_POINT_TEMPERATURE DECIMAL(4,1),\n             SOLAR_RADIATION DECIMAL(5,2),\n             RAINFALL DECIMAL(3,1),\n             SNOWFALL DECIMAL(3,1),\n             SEASONS VARCHAR(10),\n             HOLIDAY VARCHAR(20),\n             FUNCTIONING_DAY VARCHAR(5)\n           );\n           \")\n}\n\n# Load data into tables\nworldcities <- read.csv(\"raw_worldcities.csv\")\nbike_sharing_systems <- read.csv(\"raw_bike_sharing_systems.csv\")\ncities_weather_forecast <- read.csv(\"raw_cities_weather_forecast.csv\")\nseoul_bike_sharing <- read.csv(\"seoul_bike_sharing.csv\")\n\ndbWriteTable(con, \"WORLD_CITIES\", worldcities, overwrite = TRUE)\ndbWriteTable(con, \"bike_sharing_systems\", bike_sharing_systems, overwrite = TRUE)\ndbWriteTable(con, \"CITIES_WEATHER_FORECAST\", cities_weather_forecast, overwrite = TRUE)\ndbWriteTable(con, \"SEOUL_BIKE_SHARING\", seoul_bike_sharing, overwrite = TRUE)\n\n\nview(bike_sharing_systems)\n\n# Close connection\ndbDisconnect(con)\n\nview(bike_sharing_systems)\n\n\n# Connect to SQLite database\ncon <- dbConnect(RSQLite::SQLite(), \"yzf09619.sqlite\")\n# Task 1 - Record Count\ndbGetQuery(con, \"SELECT count(*) as Count_of_Records FROM seoul_bike_sharing\")\n\n# Task 2 - Operational Hours\ndbGetQuery(con, \"SELECT count(HOUR) as Numer_of_hours FROM seoul_bike_sharing WHERE RENTED_BIKE_COUNT > 0\")\n\n# Task 3\ndbGetQuery(con, \"SELECT * FROM CITIES_WEATHER_FORECAST WHERE CITY = 'Seoul' LIMIT 1\")\n\n# Task 4\ndbGetQuery(con, \"SELECT DISTINCT(SEASONS) FROM seoul_bike_sharing\")\n\n# Task 5\ndbGetQuery(con, \"SELECT MIN(DATE) as Start_Date, MAX(DATE) as End_Date FROM seoul_bike_sharing\")\n\n# Task 6\ndbGetQuery(con, \"SELECT DATE, HOUR, RENTED_BIKE_COUNT as Maximum_COUNT FROM seoul_bike_sharing WHERE RENTED_BIKE_COUNT = (SELECT MAX(RENTED_BIKE_COUNT) FROM seoul_bike_sharing)\")\n\n# Task 7\ndbGetQuery(con, \"SELECT SEASONS, HOUR, AVG(RENTED_BIKE_COUNT), AVG(TEMPERATURE) FROM seoul_bike_sharing GROUP BY SEASONS, HOUR ORDER BY AVG(RENTED_BIKE_COUNT) DESC LIMIT 10\")\n\n# Task 8\ndbGetQuery(con, \"SELECT SEASONS, AVG(RENTED_BIKE_COUNT) as AVG_S_COUNT, MIN(RENTED_BIKE_COUNT) as MIN_S_COUNT, MAX(RENTED_BIKE_COUNT) as MAX_S_COUNT FROM seoul_bike_sharing GROUP BY SEASONS ORDER BY AVG_S_COUNT DESC\")\n\n# Task 9\ndbGetQuery(con, \"SELECT SEASONS, AVG(RENTED_BIKE_COUNT) as AVG_S_COUNT, AVG(TEMPERATURE) as AVG_S_TEMP, AVG(HUMIDITY) as AVG_S_HUMIDITY, AVG(WIND_SPEED) as AVG_WIND_SPEED, AVG(VISIBILITY) as AVG_VISIBILITY, AVG(DEW_POINT_TEMPERATURE) as AVG_DEW_POINT, AVG(SOLAR_RADIATION) as AVG_SOLAR_RADIATION, AVG(RAINFALL) as AVG_RAINFALL, AVG(SNOWFALL) as AVG_SNOWFALL FROM seoul_bike_sharing GROUP BY SEASONS ORDER BY AVG_S_COUNT DESC\")\n\n# Task 10\ndbGetQuery(con, \"SELECT B.BICYCLES, B.CITY, B.COUNTRY, W.LAT, W.LNG, W.POPULATION FROM bike_sharing_systems AS B LEFT JOIN WORLD_CITIES AS W ON B.CITY = W.CITY_ASCII WHERE B.CITY = 'Seoul'\")\n\n# Task 11\ndbGetQuery(con, \"SELECT B.BICYCLES, B.CITY, B.COUNTRY, W.LAT, W.LNG, W.POPULATION FROM BIKE_SHARING_SYSTEMS AS B LEFT JOIN WORLD_CITIES AS W ON B.CITY = W.CITY_ASCII WHERE B.CITY = 'Seoul' OR (B.BICYCLES BETWEEN 15000 AND 20000) ORDER BY B.BICYCLES DESC\")\n\n# Close database connection\ndbDisconnect(con)\n\n```\n</details>\n\n<hr>\n<hr>\n\n![Query1](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot6.png)\n\n<hr>\n<hr>\n\n![Query2](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot7.png)\n<hr>\n<hr>\n\n![Query3](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot8.png)\n\n<hr>\n<hr>\n\n![Query4](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot9.png)\n\n<hr>\n<hr>\n\n![Query5](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot10.png)\n\n<hr>\n<hr>\n\n![Query6](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot11.png)\n\n\n\n<hr>\n<hr>\n<h3 id=\"perform-exploratory-data-analysis2\">D-Perform-exploratory-data-analysis with Visualization</h3>\n<p>Exploratory Data Analysis (EDA) with visualization involves using graphical representations to gain insights into the patterns, trends, and distribution of the data. Visualization plays a crucial role in making complex datasets more understandable and revealing hidden patterns.\n<p />\n\n![](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot12.png)\n<details>\n  <summary style=\"font-size: 25px;\">Show Code</summary>\n  \n  ```r\n  # Assignment: Exploratory Data Analysis with tidyverse and ggplot2\n# provide your solution here\nseoul_bike_sharing <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/seoul_bike_sharing.csv\"\nfile <- download.file(seoul_bike_sharing, destfile = \"seoul_bike_sharing.csv\" )\n\nseoul_bike_sharing <- read.csv(\"seoul_bike_sharing.csv\")\n\n\n\n# Assignment: Exploratory Data Analysis with tidyverse and ggplot2\n\n\n# Download the dataset and read it into R\nseoul_bike_sharing_url <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/seoul_bike_sharing.csv\"\ndownload.file(seoul_bike_sharing_url, destfile = \"seoul_bike_sharing.csv\")\nseoul_bike_sharing <- read.csv(\"seoul_bike_sharing.csv\")\n\n# Task 2: Recast DATE as a date\nseoul_bike_sharing$DATE <- as.Date(seoul_bike_sharing$DATE, format = \"%d/%m/%Y\")\n\n# Task 3: Cast HOURS as a categorical variable\nseoul_bike_sharing$HOUR <- as.factor(seoul_bike_sharing$HOUR)\n\n# Task 4: Dataset Summary\nsummary(seoul_bike_sharing)\n\n# Task 5: Calculate how many Holidays there are\nholidays_count <- seoul_bike_sharing %>%\n  filter(HOLIDAY == \"Holiday\") %>%\n  nrow()\nholidays_count\n\n# Task 6: Calculate the percentage of records that fall on a holiday\ntotal_records <- nrow(seoul_bike_sharing)\nholidays_count_percentage <- (holidays_count / total_records) * 100\nholidays_count_percentage\n\n# Task 7: Determine how many records we expect to have\ntotal_records\n\n# Task 8: Determine the number of records based on 'FUNCTIONING_DAY'\nseoul_bike_sharing %>%\n  count(FUNCTIONING_DAY)\n\n# Task 9: Calculate the seasonal total rainfall and snowfall\nseoul_bike_sharing %>%\n  group_by(SEASONS) %>%\n  summarize(total_rainfall = sum(RAINFALL, na.rm = TRUE),\n            total_snowfall = sum(SNOWFALL, na.rm = TRUE))\n\n\n\n\n\n\n#Load the ggplot2 package so we can generate some data visualizations.\n# provide your solution here\n\n#Create a scatter plot of RENTED_BIKE_COUNT vs DATE\n# provide your solution here\nggplot(seoul_bike_sharing, aes(x = DATE, y = RENTED_BIKE_COUNT, alpha=0.5, color = I(\"orange\"))) +\n  geom_point() +\n  ggtitle(\"Rented Bike Count According to Date\") +\n  theme(plot.title = element_text(face = \"bold\", color = \"green\"))\n#reate the same plot of the RENTED_BIKE_COUNT time series,\n#but now add HOURS as the colour\n# provide your solution here\nggplot(seoul_bike_sharing, aes(x = DATE, y = RENTED_BIKE_COUNT, alpha=0.5, color = HOUR)) +\n  geom_point() +\n  ggtitle(\"Rented Bike Count According to Date\") +\n  theme(plot.title = element_text(face = \"bold\", color = \"purple\"))\n#Histogram Rented bike density\n# provide your solution here\nggplot(seoul_bike_sharing, aes(x = RENTED_BIKE_COUNT, colour = I(\"green\"), fill = I(\"white\"))) +\n  geom_histogram(aes(y = ..density..)\n  ) +\n  geom_density(aes(color = I(\"pink\"), fill = I(\"Maroon\"))) +\n  ggtitle(\"Rented Bike Density\") +\n  theme(plot.title = element_text(face = \"bold\", color = \"green\"),\n        legend.position = \"none\")\n# Also we can use with alpha\n# provide your solution here\nggplot(seoul_bike_sharing, aes(x = RENTED_BIKE_COUNT), color = I(\"black\"), fill = I(\"white\")) +\n  geom_histogram(aes(y = ..density..),colour = 1, fill = \"white\", alpha = 0.5\n                 \n  ) +\n  \n  geom_density(aes(color = I(\"blue\"))) +\n  ggtitle(\"Rented Bike Density\") +\n  theme(plot.title = element_text(face = \"bold\", color = \"black\"),\n        legend.position = \"none\")\n#Correlation between two variables (scatter plot)\n# provide your solution here\nggplot(seoul_bike_sharing, aes(x = TEMPERATURE, y = RENTED_BIKE_COUNT, colour=HOUR)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"blue\") +\n  ggtitle(\"Correlation between Rented Bike count and Temp.\") +\n  theme(plot.title = element_text(face = \"bold\", color = \"black\"))\n# classify per season\nggplot(seoul_bike_sharing, aes(x = TEMPERATURE, y = RENTED_BIKE_COUNT, color = HOUR, alpha = 0.25)) +\n  geom_point() +\n  facet_wrap(~SEASONS) +\n  geom_smooth(method = \"lm\", color = \"brown\") \n#Create boxplot\n\n# provide your solution here\nggplot(seoul_bike_sharing, aes(x= HOUR, y = RENTED_BIKE_COUNT)) +\n  facet_wrap(~SEASONS) +\n  geom_boxplot(fill = \"bisque\", alpha = 0.3)+\n  theme_linedraw()+\n  ggtitle(\" Rented Bike count Per Hour Summary\") +\n  guides(color = FALSE) +\n  geom_jitter(aes(color = I('purple')), alpha=0.05) +\n  theme_linedraw()+\n  theme(plot.title = element_text(face = \"bold\", color = \"black\"),\n        plot.background = element_rect(color = \"red\"),\n        axis.line = element_line(color = \"red\")\n  )\n# Rainfall and date scatter plot\nseoul_bike_sharing %>%\n  group_by(DATE) %>%\n  summarise(daily_rainfall = sum(RAINFALL), daily_snowfall = sum(SNOWFALL)) %>%\n  ggplot(aes(x = DATE)) +\n  geom_point(aes(y = daily_rainfall, color = \"RAINFALL\")) +\n  geom_point(aes(y = daily_snowfall, color = \"SNOWFALL\")) +\n  theme_classic()+\n  labs(y = \"Daily Rainfall & snowfall\") +\n  ggtitle(\"Daily rainfall And snowfall According to Date:\") +\n  theme(plot.title = element_text(face = \"bold\", color = \"brown\"),\n        axis.line = element_line(color = \"red\"))\n\n```\n</details>\n\n<hr>\n<p style=\"font-size: 24px;\">Here Some Example below:</p>\n<hr>\n<hr>\n<h5>Bike rental histogram<h5 />\n\n![Rented bike vs Data time](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot14.png)\n<hr>\n<p>Here we show a scatter plot of <code>RENTED_BIKE_COUNT</code> vs. <code>DATE</code>, colored by <code>HOUR</code>.</p>\n\n**Our scatter plot shows:**\n<ul>\n  <li>Date for maximum rental: 19/06/2018</li>\n  <li>Hour for maximum rental: 18 (6 PM) (color)</li>\n  <li>Maximum Rental: 3556</li>\n</ul>\n\n**Observations:**\n<ul>\n  <li>The rented bike count starts below average during the first two hours (0:00 and 1:00).</li>\n  <li>The number of rented bikes decreases to its lowest point between 3:00 AM and 6:00 AM.</li>\n  <li>Rental counts start to increase at 7:00 AM and reach the maximum at 8:00 AM.</li>\n  <li>Rental counts decrease again to average levels until they reach the maximum again at 18:00 (6 PM).</li>\n  <li>Counts decrease again to average levels for the rest of the day, reaching normal (below average) levels again at 23:00 (11 PM).</li>\n</ul>\n\n\n\n<hr>\n<hr>\n<h5>Bike rental histogram<h5 />\n<hr>\n\n![Rented bike Density](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot15.png)\n<hr>\n\n**Show a histogram overlaid with a kernel density curve**\n<ul>\n  <li>We can see from the histogram that most of the time there are relatively few bikes rented. Indeed, the 'mode', or most frequent amount of bikes rented, is about 250.  \n</li>\n  <li>Judging by the 'bumps' at about 700, 900, and 1900, and 3200 bikes, it looks like there may be other modes hiding within subgroups of the data. \n</li>\n  <li>Interestingly, judging from the tail of the distribution, on rare occasions there are many more bikes rented out than usual.\n </li>\n</ul>\n\n\n\n<hr>\n<hr>\n<h5>Correlation between two variables(Rented bike & Temp)<h5 />\n<hr>\n\n![Correlation between Rented bike & Temp.](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot16.png)\n<hr>\n**Show a scatter plot show correlation between RENTED_BIKE_COUNT & TEMPERATURE**\n<ul>\n  <li>classify them by SEASONS.  \n</li>\n  <li>Visually, we can see some strong correlations as approximately linear patterns.\n</li>\n \n</ul>\n<hr>\n<hr>\n<h5>Bike rental boxplot<h5 />\n\n![ Rented bike count per Hour.](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot17.png)\n<hr>\n**Display of four boxplots of `RENTED_BIKE_COUNT` vs. `HOUR` grouped by `SEASONS, it Shows :**\n<hr>\n<ul>\n  <li>More bike count rented in both Summer and Autumn , Average on spring and min on winter.\n</li>\n  <li>Max Bike_rented_count occur on the hour 18 and 6 AM\n</li>\n</li>\n  <li>Although the overall scale of bike rental counts changes with the seasons, key features remain very similar.  For example, peak demand times are the same across all seasons, at 8 am and 6 pm.\n</li> \n</ul>\n\n<hr>\n<hr>\n<h5>Daily total rainfall and snowfall<h5 />\n\n![ Daily Rainfall & snowfall according to Data.](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot18.png)\n\n<hr>\n**Show a scatter plot:**\n<ul>\n  <li>calculating the daily total rainfall and snowfall.\n</li>\n</ul>\n\n<hr>\n<hr>\n<h3 id=\"perform-predictive-analysis-using-regression-models\">   E-perform-predictive-analysis-using-regression-models</h3>\n<p>Predictive analysis is a data-driven approach that leverages statistical algorithms and machine learning to analyze past and current data, so we will use a predictive analysis  for the prediction of future trends or outcomes for bike rent cont.<p/>\n\n![](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot19.png)\n\n<details>\n  <summary style=\"font-size: 25px;\">Show Code</summary>\n  \n  ```r\n  # Dataset URL\ndataset_url <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/seoul_bike_sharing_converted_normalized.csv\"\nbike_sharing_df <- read_csv(dataset_url)\n\n# Print structure of dataframe\nstr(bike_sharing_df)\n\n# Remove DATE and FUNCTIONING_DAY columns\nbike_sharing_df <- bike_sharing_df %>% \n  select(-DATE, -FUNCTIONING_DAY)\n\n# Use the `initial_split()`, `training()`, and `testing()` functions to split the dataset\n# With seed 1234\nset.seed(1234)\n# prop = 3/4\nbike_sharing_split <- initial_split(bike_sharing_df, prop = 0.75)\n\n# train_data \nbike_sharing_training <- training(bike_sharing_split)\n\n# test_data\nbike_sharing_testing <- testing(bike_sharing_split)\n\n# Use `linear_reg()` with engine `lm` and mode `regression`\nlm_model_weather <- linear_reg(mode = \"regression\") %>%\n  set_engine(engine = \"lm\")\nsummary(lm_model_weather)\ntraining_fit <-lm_model_weather %>%\n  fit(RENTED_BIKE_COUNT ~ TEMPERATURE + HUMIDITY + WIND_SPEED + VISIBILITY + DEW_POINT_TEMPERATURE + SOLAR_RADIATION + RAINFALL + SNOWFALL, data = bike_sharing_training)\n\n# print(lm_model_weather$fit)\nprint(training_fit)\n\n# build linear regression using all model\nlm <- linear_reg(mode = \"regression\") %>%\n  set_engine(engine = \"lm\")\n\n# Fit the model called `lm_model_all`\nlm_model_all <- lm %>%\n  fit(RENTED_BIKE_COUNT ~ ., data = bike_sharing_training)\n# `RENTED_BIKE_COUNT ~ .` means use all other variables except for the response variable\n\n# summary(lm_model_all$fit)\nsummary(lm_model_all)\n\nprint(lm_model_all)\n\n\n# Evalution Rmse R-squred\ntraining_results <- \n  predict(training_fit, new_data = bike_sharing_training) %>%\n  mutate(truth = bike_sharing_training$RENTED_BIKE_COUNT)\n\nhead(training_results)\n\nall_training_results  <- predict(lm_model_all, new_data = bike_sharing_training) %>%\n  mutate(truth = bike_sharing_training$RENTED_BIKE_COUNT)\nhead(all_training_results)\n\n\n# Use predict() function to generate test results for `lm_model_weather` and `lm_model_all`\n# and generate two test results dataframe with a truth column:\n\ntest_results <- \n  predict(training_fit, new_data = bike_sharing_testing) %>%\n  mutate(truth = bike_sharing_testing$RENTED_BIKE_COUNT)\n\nhead(test_results)\n\nall_testing_results  <- predict(lm_model_all, new_data = bike_sharing_testing) %>%\n  mutate(truth = bike_sharing_testing$RENTED_BIKE_COUNT)\n\nhead(all_testing_results)\n\n# rsq_weather <- rsq(...)\n# rsq_all <- rsq(...)\nrsq_weather <- rsq(test_results,\n                   truth = truth,\n                   estimate = .pred\n)\nrsq_all <- rsq(all_testing_results,\n               truth = truth,\n               estimate = .pred\n)\n\nrmse_weather <- rmse(test_results,\n                     truth = truth,\n                     estimate = .pred\n)\nrmse_all <- rmse(all_testing_results,\n                 truth = truth,\n                 estimate = .pred\n)\n# rmse_weather <- rmse(...)\n# rmse_all <- rmse(...)\n\n\nrsq_weather\nrsq_all\nrmse_weather\nrmse_all\n\nlm_model_all$fit$coefficients\n\n# Sort coefficient list\nlm_model_all %>%\n  tidy() %>%\n  arrange(desc(abs(estimate)))\n\n# Visualize the list using ggplot and geom_bar\nlm_model_all %>%\n  tidy() %>%\n  filter(!is.na(estimate)) %>%\n  ggplot(aes(x = fct_reorder(term, abs(estimate)), y = abs(estimate))) +\n  geom_bar(stat = \"identity\", fill = \"BLUE\") +\n  coord_flip() +\n  theme(axis.text.y = element_text(angle = 10, colour = \"RED\", size = 7)) +\n  xlab(\"variable\") +\n  ggtitle(\"Ranked coefficients\")\n\n\ntest_results %>%\n  mutate(train = \"testing\") %>%\n  bind_rows(training_results %>%\n              mutate(train = \"training\")) %>%\n  ggplot(aes(truth, .pred)) +\n  geom_abline(lty = 2, color = \"orange\", size = 1.5) +\n  geom_point(color = \"#006EA1\", alpha = 0.5) +\n  facet_wrap(~train) +\n  labs(x= \"Truth\", y = \"Predict Count Of Rented Bike\") +\n  ggtitle(\"Evaluate of Model 1\") +\n  theme (plot.title = element_text(face = \"bold\", color = \"green\"))\n\nall_testing_results %>%\n  mutate(train = \"testing\") %>%\n  bind_rows(all_training_results %>%\n              mutate(train = \"training\")) %>%\n  ggplot(aes(truth, .pred)) +\n  geom_abline(lty = 2, color = \"orange\", size = 1.5) +\n  geom_point(color = \"#002ED1\", alpha = 0.2) +\n  facet_wrap(~train) +\n  labs(x= \"Truth\", y = \"Predict Count Of Rented Bike\") +\n  ggtitle(\"Evaluate of Model 2\") +\n  theme (plot.title = element_text(face = \"bold\", color = \"orange\"))\n\n\n\n# Uncomment to install packages if running locally\n# install.packages(\"tidyverse\")\n# install.packages(\"tidymodels\")\n#install.packages(\"plotly\")\n\n# Uncomment to install packages if running locally\n\n\n# Load the dataset\ndataset_url <- \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/seoul_bike_sharing_converted_normalized.csv\"\nbike_sharing_df <- read_csv(dataset_url)\n\n# Remove unnecessary columns\nbike_sharing_df <- bike_sharing_df %>%\n  select(-DATE, -FUNCTIONING_DAY)\n\n# Define a linear regression model specification\nlm_spec <- linear_reg() %>%\n  set_engine(\"lm\") %>% \n  set_mode(\"regression\")\n\n# Split the data into training and testing datasets\nset.seed(1234)\nbike_sharing_split <- initial_split(bike_sharing_df, prop = 4/5)\nbike_sharing_training <- training(bike_sharing_split)\nbike_sharing_testing <- testing(bike_sharing_split)\n\n# Add polynomial terms\n# Plot the higher order polynomial fits\nggplot(data = bike_sharing_training, aes(RENTED_BIKE_COUNT, TEMPERATURE)) + \n  geom_point() + \n  geom_smooth(method = \"lm\", formula = y ~ x, color = \"red\") + \n  geom_smooth(method = \"lm\", formula = y ~ poly(x, 2), color = \"yellow\") + \n  geom_smooth(method = \"lm\", formula = y ~ poly(x, 4), color = \"green\") + \n  geom_smooth(method = \"lm\", formula = y ~ poly(x, 6), color = \"blue\")\n\n# Fit a linear model with higher order polynomial on some important variables \nlmp <- linear_reg(mode = \"regression\") %>%\n  set_engine(engine = \"lm\")\n\n# Use poly function to build polynomial terms\nlm_poly <- lmp %>%\n  fit(RENTED_BIKE_COUNT ~ . + poly(TEMPERATURE, 6) + poly(HUMIDITY, 4) + poly(RAINFALL, 2), data = bike_sharing_training)\n\n\n\n\n\n\n# Make predictions on test dataset using the lm_poly models\ntest_result_poly <- predict(lm_poly, new_data = bike_sharing_testing) %>%\n  mutate(truth = bike_sharing_testing$RENTED_BIKE_COUNT)\n\n# Replace negative prediction results with zero\ntest_result_poly[test_result_poly < 0] <- 0\n\n# Calculate R-squared and RMSE for the test results generated by lm_poly model\nrsq_lm_poly <- rsq(test_result_poly, truth = truth, estimate = .pred)\nrmse_lm_poly <- rmse(test_result_poly, truth = truth, estimate = .pred)\n\n# Add interaction terms\n# Add interaction terms to the poly regression built in previous step\nlm_poly_interact <- lmp %>%\n  fit(RENTED_BIKE_COUNT ~ . + poly(TEMPERATURE, 6) + poly(HUMIDITY, 4) + poly(RAINFALL, 2) + HUMIDITY * TEMPERATURE, data = bike_sharing_training)\n\ntest_result_poly_interact <- predict(lm_poly_interact, new_data = bike_sharing_testing) %>%\n  mutate(truth = bike_sharing_testing$RENTED_BIKE_COUNT)\ntest_result_poly_interact[test_result_poly < 0] <- 0\n\n# Calculate R-squared and RMSE for the new model to see if performance has improved\nrsq_lm_poly_interact <- rsq(test_result_poly_interact, truth = truth, estimate = .pred)\nrmse_lm_poly_interact <- rmse(test_result_poly_interact, truth = truth, estimate = .pred)\n\n# Add regularization\n# Define a linear regression model specification glmnet_spec using glmnet engine\n\nglmnet_spec <- linear_reg(penalty = 0.1, mixture = 1) %>%\n  set_engine(\"glmnet\")\n\n# Fit a glmnet model called lm_glmnet using the fit() function\nglmnet_recipe <- recipe(RENTED_BIKE_COUNT ~ . , data = bike_sharing_training)\nlasso_wf <- workflow() %>%\n  add_recipe(glmnet_recipe)\n\nlm_glmnet <- lasso_wf %>%\n  add_model(glmnet_spec) %>%\n  fit(data = bike_sharing_training)\n\n# Report rsq and rmse of the lm_glmnet model\nlm_glmnet_train_results <- lm_glmnet %>%\n  predict(new_data = bike_sharing_training) %>%\n  mutate(truth = bike_sharing_training$RENTED_BIKE_COUNT)\n\nlm_glmnet_train_results$.pred <- replace(lm_glmnet_train_results$.pred, lm_glmnet_train_results$.pred < 0, 0)\n\nrsq_lm_glmnet <- rsq(lm_glmnet_train_results, truth = truth, estimate = .pred)\nrmse_lm_glmnet <- rmse(lm_glmnet_train_results, truth = truth, estimate = .pred)\n\n# Experiment to search for improved models\n# Build at least five different models using polynomial terms, interaction terms, and regularizations.\nmodel2 <- linear_reg(penalty = 0.02, mixture = 1) %>%\n  set_engine(\"glmnet\")\nmodel2_fit <- model2 %>%\n  fit(RENTED_BIKE_COUNT ~ . + poly(TEMPERATURE, 6) + WINTER * `18` + DEW_POINT_TEMPERATURE + SOLAR_RADIATION + SUMMER * `18` + HUMIDITY, data = bike_sharing_training)\n\nmodel2_train_results <- model2_fit %>%\n  predict(new_data = bike_sharing_training) %>%\n  mutate(truth = bike_sharing_training$RENTED_BIKE_COUNT)\n\nmodel2$.pred <- replace(model2_train_results$.pred, model2_train_results$.pred < 0, 0)\n\nrsq_model2 <- rsq(model2_train_results, truth = truth, estimate = .pred)\nrmse_model2 <- rmse(model2_train_results, truth = truth, estimate = .pred)\n\nmodel3 <- linear_reg(penalty = 0.02, mixture = 0.2) %>%\n  set_engine(\"glmnet\")\nmodel3_fit <- model3 %>%\n  fit(RENTED_BIKE_COUNT ~ . + poly(TEMPERATURE, 6) + WINTER * `18` + poly(DEW_POINT_TEMPERATURE, 6) + SOLAR_RADIATION + SUMMER * `18` + TEMPERATURE * HUMIDITY, data = bike_sharing_training)\n\nmodel3_train_results <- model3_fit %>%\n  predict(new_data = bike_sharing_training) %>%\n  mutate(truth = bike_sharing_training$RENTED_BIKE_COUNT)\n\nmodel3$.pred <- replace(model3_train_results$.pred, model3_train_results$.pred < 0, 0)\n\nrsq_model3 <- rsq(model3_train_results, truth = truth, estimate = .pred)\nrmse_model3 <- rmse(model3_train_results, truth = truth, estimate = .pred)\n\nmodel4 <- linear_reg(penalty = 0.0015, mixture = 0.2) %>%\n  set_engine(\"glmnet\")\nmodel4_fit <- model4 %>%\n  fit(RENTED_BIKE_COUNT ~ . + poly(TEMPERATURE, 6) + WINTER * `18` + poly(DEW_POINT_TEMPERATURE, 6) + poly(SOLAR_RADIATION, 6) + SUMMER * `18` + TEMPERATURE * HUMIDITY + poly(HUMIDITY, 6), data = bike_sharing_training)\n\nmodel4_train_results <- model4_fit %>%\n  predict(new_data = bike_sharing_training) %>%\n  mutate(truth = bike_sharing_training$RENTED_BIKE_COUNT)\n\nmodel4$.pred <- replace(model4_train_results$.pred, model4_train_results$.pred < 0, 0)\n\nrsq_model4 <- rsq(model4_train_results, truth = truth, estimate = .pred)\nrmse_model4 <- rmse(model4_train_results, truth = truth, estimate = .pred)\n\nmodel5 <- linear_reg(penalty = 0.0015, mixture = 0.2) %>%\n  set_engine(\"glmnet\")\nmodel5_fit <- model5 %>%\n  fit(RENTED_BIKE_COUNT ~ . + poly(TEMPERATURE, 6) + WINTER * `18` + poly(DEW_POINT_TEMPERATURE, 6) + poly(SOLAR_RADIATION, 6) + poly(VISIBILITY, 6) + SUMMER * `18` + TEMPERATURE * HUMIDITY + poly(HUMIDITY, 6) + RAINFALL * TEMPERATURE + SNOWFALL * TEMPERATURE + RAINFALL * HUMIDITY + SNOWFALL * HUMIDITY, data = bike_sharing_training)\n\nmodel5_train_results <- model5_fit %>%\n  predict(new_data = bike_sharing_training) %>%\n  mutate(truth = bike_sharing_training$RENTED_BIKE_COUNT)\n\nmodel5_train_results$.pred <- replace(model5_train_results$.pred, model5_train_results$.pred < 0, 0)\n\nrsq_model5 <- rsq(model5_train_results, truth = truth, estimate = .pred)\nrmse_model5 <- rmse(model5_train_results, truth = truth, estimate = .pred)\n\n# Save their rmse and rsq values\nmodel_names <- c(\"lm_ploy\", \"model2\", \"model3\", \"model4\", \"model5\")\nrsq <- c(\"0.7295964\", \"0.7137937\", \"0.7392157\", \"0.7674439\", \"0.7817489\")\nrsme <- c(\"330.1608\", \"344.91\", \"329.24\", \"310.9102\", \"302.1648\")\ncomparison_df <- data.frame(model_names, rsq, rsme)\n\n# Report the best performed model in terms of rmse and rsq\nrsq_lm_ploy <- 0.7295964\nrmse_lm_ploy <- 330.1608\n\nrsq_model2 <- 0.7137937\nrmse_model2 <- 344.91\n\nrsq_model3 <- 0.7392157\nrmse_model3 <- 329.24\n\nrsq_model4 <- 0.7674439\nrmse_model4 <- 310.9102\n\nrsq_model5 <- 0.7817489\nrmse_model5 <- 302.1648\n\n# Visualize the saved RMSE and R-squared values using a grouped barchart\ncomparison_df %>%\n  pivot_longer(!model_names) %>%\n  ggplot(aes(x = model_names, y = value, fill = name)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Comparing RSME AND RSQ Across Models\", fill = \"Metric\") +\n  theme(plot.title = element_text(face = \"bold\", color = \"blue\"))\n\n# Create a Q-Q plot by plotting the distribution difference between the predictions generated by your best model and the true values on the test dataset\nggplot(model5_train_results) +\n  stat_qq(aes(sample = truth), color = \"green\") +\n  stat_qq(aes(sample = .pred), color = \"red\")\n\n\n```\n</details>\n<hr>\n<p style=\"font-size: 24px;\">Here Some  diagram below:</p>\n\n<hr>\n<h5>Ranked coefficients:<h5 />\n\n![Ranked coefficients](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot20.png)\n\n**Ranked coefficients:**\n<ul>\n  <li>This is a bar chart showing the ranked coefficients of all independent variables relative to the dependent variable (RENTED_BIKE_COUNT).</li>\n  <li>Refer back to page 18 Weather Seasonality section. Now we become sure that we are on the right track, and we can list the top 3 ranked coefficients:\n    <ul>\n      <li>A: RAINFALL</li>\n      <li>B: HUMIDITY</li>\n      <li>C: TEMPERATURE</li>\n    </ul>\n  </li>\n</ul>\n\n\n<hr>\n<h5>Compare Rmse and RSQ across Models:<h5 />\n\n![Model evaluation](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot21.png)\n\n<hr>\n<hr>\n<h5>Find the best performing model\t:<h5 />\n\n![Best Model evaluation](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot22.png)\n<hr>\n**Ranked coefficients:**\n<ul>\n  <li>The best performing model is model5 with:\n  <ul>\n      <li>A: RMSE is : 302.1648\n</li>\n      <li>B:R-squared 0.7817489\n</li>\n</ul>\n</li>\n  <li>Model formula here (RENTED_BIKE_COUNT ~ . + poly(TEMPERATURE, 6) + WINTER * `18` + poly(DEW_POINT_TEMPERATURE, 6) + poly(SOLAR_RADIATION, 6) + poly(VISIBILITY, 6) + SUMMER * `18` + TEMPERATURE * HUMIDITY + poly(HUMIDITY, 6) + RAINFALL * TEMPERATURE + SNOWFALL * TEMPERATURE + RAINFALL * HUMIDITY + SNOWFALL * HUMIDITY\n </li>\n  <li>Evaluation of the model by Scatter plot chart showing the predicted and truth values\n</li>\n</ul>\n\n\n<hr>\n<h5>Temperature Vs Rented bike cont\t:<h5 />\n\n![Tmp Vs  Rented_cont](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot23.png)\n\n<hr>\n<h5>Q-Q plot of the best model:<h5 />\n\n![Q-Q plot](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot24.png)\n\n**This is a Q-Q plot of the best model’s  model 5 test results vs the truths**\n<ul>\n  <li>(Truth) = Green\n  </li>\n  <li>(Predicted) = Red \n </li>\n<ul>\n\n<hr>\n<hr>\n<h3 id=\"build-an-r-shiny-dashboard-app\">F-Build-an-r-shiny-dashboard-app</h3>\n<p>Now we are going to visualize the data summary, facilitating insights through interactive and user-friendly displays. We will also create a simple Shiny web application that shows more details.</p>\n<p>Visit URL: <a href=\"https://n0gl91-adel-alaa.shinyapps.io/bike_rented/\" target=\"_blank\">https://n0gl91-adel-alaa.shinyapps.io/bike_rented/</a></p>\n\n<ul>\n  <li>For UI code press here\n    <details>\n      <summary style=\"font-size: 25px;\">Show Code</summary>\n      <code>\n        # Load required libraries\n        require(leaflet)\n\n        # Create a RShiny UI\n        shinyUI(\n          fluidPage(padding=5,\n            titlePanel(\"Bike-sharing demand prediction app\"), \n            # Create a side-bar layout\n            sidebarLayout(\n              # Create a main panel to show cities on a leaflet map\n              mainPanel( \n                leafletOutput(\"city_bike_map\", height = 600)\n              ),\n              # Create a side bar to show detailed plots for a city\n              sidebarPanel(\n                # select drop down list to select city\n                selectInput(\"city_dropdown\",\"Cities\", \n                            choices = c(\"All\", city_weather_bike_df$CITY_ASCII)),\n                plotOutput(\"temp_line\", height = 200, width = 400),\n                br(),\n                plotOutput(\"bike_line\", height = 200, width = 400, click = \"plot_click\"),\n                verbatimTextOutput(\"bike_date_output\"),\n                \n                plotOutput(\"humidity_pred_chart\", height = 200, width = 400)\n              )\n            )\n          )\n        )\n      </code>\n    </details>\n  </li>\n  <li>For Server code press here\n    <details>\n      <summary style=\"font-size: 25px;\">Show Code</summary>\n      <code>\n        # Install and import required libraries\n        require(shiny)\n        require(ggplot2)\n        require(leaflet)\n        require(tidyverse)\n        require(httr)\n        require(scales)\n        # Import model_prediction R which contains methods to call OpenWeather API\n        # and make predictions\n        source(\"model_prediction.R\")\n\n        test_weather_data_generation<-function(){\n          #Test generate_city_weather_bike_data() function\n          city_weather_bike_df<-generate_city_weather_bike_data()\n          stopifnot(length(city_weather_bike_df)>0)\n          print(head(city_weather_bike_df))\n          return(city_weather_bike_df)\n        }\n\n        # Create a RShiny server\n        shinyServer(function(input, output){  \n\n          observeEvent (input$city_dropdown,{\n            if(input$city_dropdown == \"All\"){\n              output$city_bike_map = renderLeaflet ({\n                leaflet() %>% addTiles() %>% \n                  addMarkers(label = cities_today_status$CITY_ASCII,\n                             lng = cities_today_status$LNG, \n                             lat = cities_today_status$LAT, \n                             popup = cities_today_status$LABEL,\n                             options = popupOptions(closeButton = FALSE)) %>% \n                  addCircleMarkers(lng = cities_today_status$LNG,\n                                   lat = cities_today_status$LAT,\n                                   color = cities_today_status$COLOR, \n                                   radius = cities_today_status$CIRCLE )\n              })\n            }else{\n              selected_city <- reactive({ cities_today_status %>% \n                  filter(CITY_ASCII==input$city_dropdown) }) \n\n              selected_city_5_day <- reactive({city_weather_bike_df %>% \n                  filter(CITY_ASCII == input$city_dropdown)})\n\n              output$city_bike_map <- renderLeaflet ({\n                leaflet() %>% addTiles() %>% \n                  setView(lng = selected_city()$LNG, \n                          lat = selected_city()$LAT, \n                          zoom=15) %>% \n                  addMarkers(lng = selected_city()$LNG, \n                             lat = selected_city()$LAT, \n                             popup = selected_city()$DETAILED_LABEL)\n              })\n              output$temp_line <- renderPlot({\n                ggplot(selected_city_5_day(),aes(x = FORECASTDATETIME,y = TEMPERATURE)) +\n                  geom_line(color = \"brown\") +\n                  geom_point(color = \"red\") +\n                  geom_text(aes(label = TEMPERATURE), size = 3) +\n                  labs(title = paste(\"Temperature forcast of next 5 days in\",input$city_dropdown)) +\n                  xlab('Date (3hrs interval)') +\n                  ylab(\"Temperature in C\")})\n              \n              output$bike_line <- render\n              plot({\n                ggplot(selected_city_5_day(),aes(x = FORECASTDATETIME,y = TEMPERATURE)) +\n                  geom_line(color = \"brown\") +\n                  geom_point(color = \"red\") +\n                  geom_text(aes(label = TEMPERATURE), size = 3) +\n                  labs(title = paste(\"Temperature forcast of next 5 days in\",input$city_dropdown)) +\n                  xlab('Date (3hrs interval)') +\n                  ylab(\"Temperature in C\")})\n              \n              output$bike_line <- renderPlot({\n                ggplot(selected_city_5_day(),aes(x = FORECASTDATETIME, y = BIKE_PREDICTION)) +\n                  geom_line(color = \"blue\") +\n                  geom_point(color = \"blue\") +\n                  geom_text(aes(label = BIKE_PREDICTION),size=3) +\n                  labs(title = paste(\"Bike prediction of next 5 days in\",input$city_dropdown)) +\n                  xlab('Date (3hrs interval)') +\n                  ylab(\"Bike No.\")})\n              \n              output$bike_date_output <- renderText({paste0(\"Time=\", as_datetime(input$plot_click$x),\n                                                            \"\\nBike Count Prediction=\", input$plot_click$y) })\n              \n              output$humidity_pred_chart=renderPlot({\n                ggplot(selected_city_5_day(),aes(x=HUMIDITY,y=BIKE_PREDICTION))+\n                  geom_smooth(method = lm, formula = y ~ poly(x, 4),color = \"green\")+\n                  geom_point(color = \"brown\")+\n                  labs(title = paste(\"Relationship between Humidity & Bike prediction in\", input$city_dropdown)) +\n                  xlab('Humidity') +\n                  ylab(\"Bike No.\")})\n            }})\n        })\n      </code>\n    </details>\n  </li>\n</ul>\n\n<hr>\n<p style=\"font-size: 24px;\">Choose Any City For example(Seoul) : </p>\n\n![](https://raw.githubusercontent.com/Adel-aa/IBM-Data-Analytics-with-Excel-and-R/master/image/plot25.png)\n<hr>\n<hr>\n<hr>\n\n\n<h2 id=\"Conclusion\" style=\"text-decoration: underline; font-size: 24px; margin-top: 20px;\">4-Conclusion:</h2>\n\n<ul style=\"list-style-type: disc; margin-left: 20px; font-size: 18px;\">\n  <li>Max average bike rent count in the Summer, followed by Autumn, Spring, and Winter, respectively, which means we predict the highest bike-sharing demand in the summer season and the lowest in the winter.</li>\n  <li>Peak demand times are consistent across all seasons, occurring at 8 AM and 6 PM.</li>\n  <li>Bike rent count is affected by weather variables such as TEMPERATURE, HUMIDITY, DEW_POINT_TEMPERATURE, SOLAR_RADIATION, and RAINFALL, with a notable influence from high (red) temperatures.</li>\n  <li>The accuracy of the demand forecasting models used demonstrates their potential benefits for predicting future usage patterns, especially in the winter season.</li>\n  <li>In closing, the journey doesn't end here. Let's use this data as a catalyst for positive change, transforming our bike-sharing system into a model of efficiency, accessibility, and innovation for years to come.</li>\n</ul>\n\n<p style=\"font-weight: bold; font-size: 18px;\">Thank you for your attention and collaboration.</p>\n\n<p style=\"font-size: 18px;\">You can contact me at <a href=\"mailto:adel0alaa14@gmail.com\">adel0alaa14@gmail.com</a> for any advice.</p>\n","metadata":{}}]}